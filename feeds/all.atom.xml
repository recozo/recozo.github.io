<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Recozo's Blog</title><link href="https://recozo.github.io/" rel="alternate"></link><link href="https://recozo.github.io/feeds/all.atom.xml" rel="self"></link><id>https://recozo.github.io/</id><updated>2023-01-30T18:40:00+08:00</updated><entry><title>模型与数据库</title><link href="https://recozo.github.io/django-models-and-databases.html" rel="alternate"></link><published>2023-01-19T10:20:00+08:00</published><updated>2023-01-30T18:40:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2023-01-19:/django-models-and-databases.html</id><summary type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;1. 利用模型执行数据库操作&lt;/h2&gt;
&lt;p&gt;一旦创建数据模型后，Django 自动生成一套数据库操作 API，可以执行创建、检索、更新
和删除操作。&lt;/p&gt;
&lt;p&gt;为 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;1. 利用模型执行数据库操作&lt;/h2&gt;
&lt;p&gt;一旦创建数据模型后，Django 自动生成一套数据库操作 API，可以执行创建、检索、更新
和删除操作。&lt;/p&gt;
&lt;p&gt;为了用 Python 对象展示数据表对象，Django 使用了一套直观的系统：一个模型类代表的是
数据库表，一个模型类的实例代表的是数据库表中的一条记录。&lt;/p&gt;
&lt;p&gt;字段查询，即如何制定 SQL WHERE 子句，以关键字参数的形式传递给 QuerySet 方法
filter()、exclude() 和 get()。
基本的查询关键字参数遵照 field__lookuptype=value，查询类型有二十多种。
详细资料：
&lt;a class="reference external" href="https://docs.djangoproject.com/en/4.1/ref/models/querysets/#field-lookups"&gt;https://docs.djangoproject.com/en/4.1/ref/models/querysets/#field-lookups&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跨关系查询，Django 提供了一种强大而直观的方式来“追踪”查询中的关系，在后台自动为你处理
SQL JOIN。要跨一个关系，使用跨模型的相关字段的字段名，用双下划线分割，（根据实际需要，
跨度不受限）直到得到你想要的字段，如
Blog.objects.filter(entry__authors__name='Lennon')，就有二个跨度。
它也可以反向工作，默认情况下，你在查找中使用模型的小写名称来引用一个 “反向” 关系。
也可以不使用小写名称，通过使用 ForeignKey.related_query_name 自定义目标模型中
反向过滤器的名称。如果设置了，它默认为 related_name 或 default_related_name 的值，
否则默认为模型的小写名称。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;2. 关联对象&lt;/h2&gt;
&lt;p&gt;正向访问：当你在模型中定义了关联关系（如 ForeignKey， OneToOneField， 或
ManyToManyField），该模型的实例将会自动获取一套 API，能快捷地访问关联对象。&lt;/p&gt;
&lt;p&gt;逆向访问：Django也提供了从关联关系的另一边进行访问的API，即从被关联模型到
定义该关联关系的模型的访问。例如，一个Blog对象b能通过entry_set属性b.entry_set.all()
访问包含所有关联Entry对象的列表。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;一对多关联&lt;/p&gt;
&lt;p&gt;正向访问：If a model has a ForeignKey, instances of that model will have
access to the related (foreign) object via the foreign-key attribute.&lt;/p&gt;
&lt;p&gt;逆向访问：If a model(source) has a ForeignKey, instances of the foreign-key
model(target) will have access to a Manager that returns all instances of
the source model. By default, this Manager is named FOO_set, where FOO is
the source model name, lowercased. You can override the FOO_set name by
setting the related_name parameter in the ForeignKey definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;多对多关联&lt;/p&gt;
&lt;p&gt;多对多关联的两端均自动获取访问另一端的 API。该 API 的工作方式类似一对多关联的逆向访问。&lt;/p&gt;
&lt;p&gt;定义了 ManyToManyField 的模型使用字段名作为属性名，而 “反向” 模型使用源模型名的
小写形式，加上 '_set' （就像反向一对多关联一样）。
和 ForeignKey 一样， ManyToManyField 也能指定 related_name。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;一对一关联&lt;/p&gt;
&lt;p&gt;若在模型中定义了 OneToOneField，该模型的实例只需通过该属性就能访问关联对象。
不同点在于 “反向” 查询。一对一关联所关联的对象也能访问 Manager 对象，
但这个 Manager 仅代表一个对象，而不是对象的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;逆向关联是如何实现的&lt;/p&gt;
&lt;p&gt;其它对象关联映射实现要求你在两边都定义关联关系。而 Django 开发者坚信这违反了
DRY 原则（不要自我重复），故 Django 仅要求你在一端定义关联关系。&lt;/p&gt;
&lt;p&gt;但这是如何实现的呢，给你一个模型类，模型类并不知道是否有其它模型类关联它，
直到其它模型类被加载？&lt;/p&gt;
&lt;p&gt;答案位于应用注册。 Django 启动时，它会导入 INSTALLED_APPS 列出的每个应用，
和每个应用中的 model 模块。无论何时创建了一个新模型类，Django 为每个关联模型
添加反向关联。若被关联的模型未被导入，Django 会持续追踪这些关联，并在关联模型
被导入时添加关联关系。&lt;/p&gt;
&lt;p&gt;出于这个原因，包含你所使用的所有模型的应用必须列在 INSTALLED_APPS 中。否则，
反向关联可能不会正常工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;3. 为模型提供初始数据&lt;/h2&gt;
&lt;p&gt;第一次设置应用程序时，有时需要用硬编码的数据预填充数据库。你可以通过数据迁移
（data migration）或固定数据（fixture）提供初始数据。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用数据迁移&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/4.1/topics/migrations/#data-migrations"&gt;https://docs.djangoproject.com/en/4.1/topics/migrations/#data-migrations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用固定数据&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/4.1/howto/initial-data/"&gt;https://docs.djangoproject.com/en/4.1/howto/initial-data/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;固定数据是 Django 知道如何导入数据库的数据集合。若你已有一些可用数据，
创建固定数据最直接的方式是使用 manage.py dumpdata 命令。当然，你也可以手写固定数据；
固定数据支持 JSON，XML 或 YAML （要求已安装 PyYAML）格式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;dumpdata&lt;span class="w"&gt; &lt;/span&gt;-h
$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;dumpdata&lt;span class="w"&gt; &lt;/span&gt;myapp&lt;span class="w"&gt; &lt;/span&gt;--format&lt;span class="w"&gt; &lt;/span&gt;json&lt;span class="w"&gt; &lt;/span&gt;--indent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt; &lt;/span&gt;mydump
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你使用 manage.py loaddata 命令导入固定数据，Django 会在三个位置搜索固定数据：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在每个安装的应用程序的 fixtures 目录中&lt;/li&gt;
&lt;li&gt;在 FIXTURE_DIRS 配置中指定的任何目录中&lt;/li&gt;
&lt;li&gt;固定数据中包括的目录路径&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;loaddata&lt;span class="w"&gt; &lt;/span&gt;-h
$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;loaddata&lt;span class="w"&gt; &lt;/span&gt;foo/bar/mydata
$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;loaddata&lt;span class="w"&gt; &lt;/span&gt;foo/bar/mydata.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有指定文件的扩展名，会探索所有可用的固定数据内容，如果指定了文件扩展名，
则只有该类型的固定数据才会被加载。&lt;/p&gt;
&lt;p&gt;以上最后一条命令，将对每个安装的应用程序搜索 &amp;lt;app_label&amp;gt;/fixtures/foo/bar/mydata.json，
为 FIXTURE_DIRS 中的每个目录搜索 &amp;lt;dirname&amp;gt;/foo/bar/mydata.json，
并搜索字面路径 foo/bar/mydata.json。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category><category term="models and databases"></category></entry><entry><title>Linux Shell Skills</title><link href="https://recozo.github.io/linux-shell-skills.html" rel="alternate"></link><published>2023-01-22T23:44:21+08:00</published><updated>2023-01-22T23:44:21+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2023-01-22:/linux-shell-skills.html</id><summary type="html">&lt;div class="section" id="debian"&gt;
&lt;h2&gt;如何查看 debian 包中的文件&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
dpkg -L packagename
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-the-difference-between-sbin-nologin-and-bin-false"&gt;
&lt;h2&gt;What's the difference between /sbin/nologin and /bin/false ?&lt;/h2&gt;
&lt;p&gt;When /sbin/nologin is set as the shell, if user with that shell logs in, they'll get a polite message saying 'This account is currently not available.' This …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="debian"&gt;
&lt;h2&gt;如何查看 debian 包中的文件&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
dpkg -L packagename
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-the-difference-between-sbin-nologin-and-bin-false"&gt;
&lt;h2&gt;What's the difference between /sbin/nologin and /bin/false ?&lt;/h2&gt;
&lt;p&gt;When /sbin/nologin is set as the shell, if user with that shell logs in, they'll get a polite message saying 'This account is currently not available.' This message can be changed with the file /etc/nologin.txt.&lt;/p&gt;
&lt;p&gt;/bin/false is just a binary that immediately exits, returning false, when it's called, so when someone who has false as shell logs in, they're immediately logged out when false exits. Setting the shell to /bin/true has the same effect of not allowing someone to log in but false is probably used as a convention over true since it's much better at conveying the concept that person doesn't have a shell.&lt;/p&gt;
&lt;p&gt;Looking at nologin's man page, it says it was created in 4.4 BSD (early 1990s) so it came long after false was created. The use of false as a shell is probably just a convention carried over from the early days of UNIX.&lt;/p&gt;
&lt;p&gt;nologin is the more user-friendly option, with a customizable message given to the user trying to log in, so you would theoretically want to use that; but both nologin and false will have the same end result of someone not having a shell and not being able to ssh in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="five-find-command-linux-find-locate-whereis-which-type-1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://www.programering.com/a/MjM5gDMwATg.html"&gt;Five find command Linux: find, locate, whereis, which, type&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;find&lt;/dt&gt;
&lt;dd&gt;Find is the most common and most powerful search command, you can find anything you want to find the file in it.&lt;/dd&gt;
&lt;dt&gt;locate&lt;/dt&gt;
&lt;dd&gt;The locate command is &amp;quot;another way find -name&amp;quot;, but it is much faster than the latter, because it does not search the directory, but search a database (/var/lib/locatedb), containing all the local file information in the database. Automatic creation of the database of Linux system, and automatic daily updated, so use the locate command to not check the latest change file. To avoid this situation, can before using locate, first useupdatedbCommand, to update the database manually.&lt;/dd&gt;
&lt;dt&gt;whereis&lt;/dt&gt;
&lt;dd&gt;The whereis command can only be used for the program name search, and search a binary file (parameter -b), the man description file (parameter -m) and source code files (parameter -s). If you omit the argument, it returns all the information.&lt;/dd&gt;
&lt;dt&gt;which&lt;/dt&gt;
&lt;dd&gt;The which command is the role of the PATH variable, in the path specified in the search, a command position, return the first search results and. That is to say, use the which command, you can see a system command exists, and what a position command.&lt;/dd&gt;
&lt;dt&gt;type&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;The type command can not find command, which is used to distinguish between a command what is included with the shell, or provided by independent binary files outside the shell. If a command is an external command, then use the -p parameter, the command will display the path, the equivalent of the which command.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
type -a echo
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="https://unix.stackexchange.com/questions/1355/why-is-echo-a-shell-built-in-command"&gt;There are two classes of builtins&lt;/a&gt;&lt;/p&gt;
&lt;ol class="last arabic simple"&gt;
&lt;li&gt;Some commands have to be built into the shell program itself because they cannot work if they are external.&lt;/li&gt;
&lt;li&gt;The other class of commands are built into the shell purely for efficiency.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it-1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it"&gt;What is the difference between executing a Bash script vs sourcing it?&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
./myscript

. myscript
source myscript
&lt;/pre&gt;
&lt;p&gt;./ 代表的是当前目录。
. myscript 与 source myscript 是一样的，This &amp;quot;spelling&amp;quot; is the official one as defined by POSIX. Bash defined source as an alias to the dot.&lt;/p&gt;
&lt;p&gt;Executing a script will run the commands in a new shell process.&lt;/p&gt;
&lt;p&gt;Sourcing a script will run the commands in the current shell process.&lt;/p&gt;
&lt;p&gt;Use source if you want the script to change the environment in your currently running shell. use execute otherwise.&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="linux"></category><category term="shell"></category></entry><entry><title>ReStructuredText 笔记</title><link href="https://recozo.github.io/restructuredtext-skills.html" rel="alternate"></link><published>2023-01-22T23:44:21+08:00</published><updated>2023-01-22T23:44:21+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2023-01-22:/restructuredtext-skills.html</id><summary type="html">&lt;p class="first last"&gt;ReStructuredText 学习笔记，如果发现没看懂，可以查看本文档的原始 reST 文档&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;段落&lt;/h2&gt;
&lt;p&gt;段落是reST文档中最基本的块。段落只是由一个或多个空行分隔的文本块。与在Python中一样，缩进在reST中很重要，因此同一段落中的所有行必须左对齐到相同的缩进级别。
缩进的段落会被视为引用段落。&lt;/p&gt;
&lt;p&gt;这是正常的段落，中文段落有什么要注意的吗？没有发现。
空格正常吗？好像正常。&lt;/p&gt;
&lt;blockquote&gt;
这是中文的缩进部分，可以看到有什么不对的地方吗？没有看到。
继续缩进部分的内容。&lt;/blockquote&gt;
&lt;p&gt;恢复正常段落，是正常的了吧！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;行内标记&lt;/h2&gt;
&lt;p&gt;标准的reST行内标记非常简单：使用一个 * 用于： &lt;em&gt;斜体&lt;/em&gt; ，两个星号 ** 用于： &lt;strong&gt;粗体&lt;/strong&gt; ，两个反引号 `` 用于： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;fixed-space&lt;/span&gt; literal(中文有固定间距？)&lt;/tt&gt; 。
但是如果星号或反引号出现在文本中并且可能与行内标记分隔符混淆，则需要使用反斜杠进行转义，如显示 *被星号包围的内容* 。
可以将行内标记的用法想像为 (括号包围的内容) ，如果有空格包围或存在于单词中间时不会被视为行内标记，如 5*3=15， * ** `` 。&lt;/p&gt;
&lt;p&gt;请注意此标记的一些限制：它不能嵌套，内容无法以空格开头或结尾，必须通过非单词字符将其与周围文本分开。
不过最后一个限制可以使用反斜杠转义空格来解决这个问题，对于中文来说特别管用，注意一下&lt;strong&gt;没有空格&lt;/strong&gt;是吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;列表&lt;/h2&gt;
&lt;p&gt;和HTML一样，支持有序、无序和定义三种列表。
列表和段落一样，必须有空行分隔，也支持嵌套列表，注意也必须通过空行与父列表分隔。&lt;/p&gt;
&lt;p&gt;列表项可以由多种符号定义，暂时不想太复杂了，有序使用数字定义，无序使用*定义，等以后有时间再仔细来学吧。TODO&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;有序列表由数字加上.号开始，与内容要有空格，这是列表项一
也可以有多行，只要缩进级别一样就可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这是有序列表项二，一个空格&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;嵌套项一&lt;/li&gt;
&lt;li&gt;自动出数字&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这是有序列表项三，一个空格，嘿嘿&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="20"&gt;
&lt;li&gt;使用其它数字开始序列&lt;/li&gt;
&lt;li&gt;自动出数字&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这是有序列表项四，二个空格，嘿嘿&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;嵌套项一，古怪！
为什么多个空格生成的HTML代码与一个空格的代码不一样？&lt;/li&gt;
&lt;li&gt;嵌套项二，发现吗？这个和下一个与前边二个的嵌套所生成的HTML不一样！
难道是pelican的bug??&lt;/li&gt;
&lt;li&gt;自动出数字&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这是有序列表项四，三个空格，嘿嘿&lt;/p&gt;
&lt;ol class="arabic simple" start="9"&gt;
&lt;li&gt;嵌套项一&lt;/li&gt;
&lt;li&gt;自动出数字&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;列表是不是由段落结束？&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;新的列表吗？&lt;/li&gt;
&lt;li&gt;不同的列表确实可以由段落分隔&lt;/li&gt;
&lt;li&gt;这儿使用了#. 但是没有沿用上一个列表的数字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;继续列表功能，无序列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;无序列表项一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;无序列表项二
继续项二的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;无序列表一级嵌套项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;无序列表一级嵌套项&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;无序列表二级嵌套项&lt;/li&gt;
&lt;li&gt;无序列表二级嵌套项&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;还原到了最顶级列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续列表功能，定义列表&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;术语&lt;/dt&gt;
&lt;dd&gt;定义列表将术语与定义关联在一起
多个术语之间无须使用空行分隔&lt;/dd&gt;
&lt;dt&gt;术语不能超过一行&lt;/dt&gt;
&lt;dd&gt;定义必须相对术语缩进，和术语之间不能有空行分隔，
否则就变成了引用段落了，是吧，哈哈&lt;/dd&gt;
&lt;dt&gt;这条术语与上一条有空行分隔&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;定义也可以有多个段落，这是段落一。&lt;/p&gt;
&lt;p class="last"&gt;这是段落二。
当使用多个段落时，会导致生成的HTML被包括在P中，导致格式与上边的不一致(P有上下边距)。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;预格式文本（代码块）&lt;/h2&gt;
&lt;p&gt;通过使用特殊标记 :: 结束段落来引入预格式文本，预格式文本必须用空行与周围的内容分隔。
当其后的文本的缩进回到预格式文本之前段落的同样缩进级别时，预格式文本结束。
对 :: 的处理如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 如果它作为自己的段落出现，则该段落完全不在文档中
public class Test
{
}
&lt;/pre&gt;
&lt;p&gt;如果前面有空格，则删除标记&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 仔细看，上边的段落后什么也没有
public class Test
{
}
&lt;/pre&gt;
&lt;p&gt;如果前面是非空格，则标记将替换为单个冒号:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 仔细看，上边的段落后边有个冒号
public class Test
{
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;章节标题&lt;/h2&gt;
&lt;p&gt;如果内容比较长，可以使用章节标题来划分章节，章节标题由一行文本，加上下划线和上划线（可选）组成，
上下划线可使用以下符号（ = - ` : ' &amp;quot; ~ ^ _ * + # &amp;lt; &amp;gt; ），上下划线长度不能少于文本的长度，
使用相同上下线的章节视为同一级别，没有为某个符号固定标题级别，可以参考 Python 样式指南中的约定&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;#, with overline, for parts，有上线，用于编&lt;/li&gt;
&lt;li&gt;*, with overline, for chapters，有上线，用于章&lt;/li&gt;
&lt;li&gt;=, for sections，用于节&lt;/li&gt;
&lt;li&gt;-, for subsections，用于小节&lt;/li&gt;
&lt;li&gt;^, for subsubsections，用于子小节&lt;/li&gt;
&lt;li&gt;&amp;quot;, for paragraphs，用于款&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;文档标题与子标题&lt;/h3&gt;
&lt;p&gt;整篇文档的标题与章节标题不一样，你可以在文档开始使用一个唯一的样式进行标记，
文档的子标题则是紧随文档标题之后，使用另一个唯一的样式标记。
（在这篇笔记中设置子标题，不知是不是 Pelican 不支持，没有作用呢！？）&lt;/p&gt;
&lt;p id="target-1"&gt;章节标题可以作为链接目标，如链接到段落，可以使用 &amp;quot;&lt;a class="reference internal" href="#section-2"&gt;段落&lt;/a&gt;&amp;quot;，如果标题文本中含有空格，则还要用反引号包围标题，如 &amp;quot;&lt;a class="reference internal" href="#section-header"&gt;Section Header&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-header"&gt;
&lt;h3&gt;Section Header&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;超链接&lt;/h2&gt;
&lt;p&gt;在 reST 中，超级链接由二部分组成，
一是源链接（Source Link），类似于HTML中的链接文本，一个具体的源链接就是一个链接引用了；
二是目标链接（Target Link），类似于HTML的链接地址;
源链接与目标链接都是通过 _ 来定义的，
源链接定义的格式如下： reference-name_，也就是 _ 是在引用名之后；
与引用名一致的目标链接必须存在于文档中的（位置无所谓），目标链接定义的格式如下： .. _reference-name: link-block 。
引用名如果包含空格，则需要使用反引号括起来，如 `reference name`。
以上二部分是原理上的东西，主要用在命名链接中，在实际操作中源链接或目标链接其实都可以省略掉。&lt;/p&gt;
&lt;p&gt;具体形式可分为以下几种：&lt;/p&gt;
&lt;p&gt;独立链接：直接输入网址即可，例如：&lt;a class="reference external" href="http://www.debian.org"&gt;http://www.debian.org&lt;/a&gt;，此时没有对应链接文本，直接显示链接地址&lt;/p&gt;
&lt;p&gt;命名链接：通过引用名来实现的超级链接，只需要定义一个目标链接，可以在文档多处引用。如：
我喜欢的LINUX版本是 &lt;a class="reference external" href="http://www.debian.org"&gt;Debian&lt;/a&gt; 。（这儿通过引用名来实现，引用名就是 Debian，在本文中其链接目标就定义在本段之后，其实是可以在文档任何位置定义。）&lt;/p&gt;
&lt;p&gt;匿名链接：链接目标与链接引用都使用 __ 进行标记。如 &lt;a class="reference external" href="http://www.debian.org"&gt;我最喜欢的LINUX发行版本是 Debian&lt;/a&gt; 。（这儿是通过匿名链接来实现，其链接目标就在本段之后定义。）
创建链接引用时引用名应该尽可能的详细，但是引用名过长对创建链接目标而言就不方便了。
匿名链接便于为大段文字加上链接，对于一次性的链接也很方便。
因为没有引用名，只能一次性配对使用，
文档中链接引用与链接目标的顺序就很重要了，第一个匿名引用对应第一个匿名目标，依此类推。
因而在编辑时必须注意，特别是对于长文档而言，要小心使用，为了便于阅读和维护，建议链接目标尽量保持在链接引用附近。&lt;/p&gt;
&lt;p&gt;锚点链接：在定义目标链接时，将链接的目标地址留空，可以在当前位置标记锚点。如下面讲标题链接时就使用了在章节标题那儿设置的锚点链接。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. _标题链接:
&lt;/pre&gt;
&lt;p&gt;标题链接：reST 在定义标题时，还会自动定义一个 &lt;a class="reference internal" href="#target-1"&gt;标题链接&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
标题名称
========

跳转到 标题名称_
&lt;/pre&gt;
&lt;p&gt;嵌入链接与别名：无须定义链接目标，链接引用可以包含（用 &amp;lt; &amp;gt; 括起来的）链接地址或者另一个链接引用，例如：&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://www.python.org"&gt;Python home page&lt;/a&gt; for info.
This &lt;a class="reference external" href="http://www.python.org"&gt;link&lt;/a&gt; is an alias to the link above.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
See the `Python home page &amp;lt;http://www.python.org&amp;gt;`_ for info.
This `link &amp;lt;Python home page_&amp;gt;`_ is an alias to the link above.
&lt;/pre&gt;
&lt;p&gt;从代码上来说，以上二句相同于是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
See the `Python home page`_ for info.
This link_ is an alias to the link above.

.. _Python home page: http://www.python.org
.. _link: `Python home page`_
&lt;/pre&gt;
&lt;p&gt;尽管这种构造写起来很方便，但是可读性太差，不是很建议使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h2&gt;表格&lt;/h2&gt;
&lt;p&gt;有二种语法创建表格，一种是 Grid 表格，功能完善但是很笨重，另一种是 Simple 表格，方便创建但功能有限；&lt;/p&gt;
&lt;p&gt;Simple 表格:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======
&lt;/pre&gt;
&lt;p&gt;实际效果如下：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="31%" /&gt;
&lt;col width="31%" /&gt;
&lt;col width="38%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="2"&gt;Inputs&lt;/th&gt;
&lt;th class="head"&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;A&lt;/th&gt;
&lt;th class="head"&gt;B&lt;/th&gt;
&lt;th class="head"&gt;A or B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h2&gt;显示标记&lt;/h2&gt;
&lt;p&gt;显示标记块（ &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#explicit-markup-blocks"&gt;Explicit Markup Blocks&lt;/a&gt;）是一个文本块，用于大多数需要特殊处理的构造，如 footnotes, citations, hyperlink targets, directives, substitution definitions, and comments 。
显示标记引导符以两个 . 加空格表示（.. ）;
显示标记块的第一行由显示标记引导符开始，第二行相对第一行缩进，缩进级别回退到第一行的缩进级别时结束。格式:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. explicit markup block begin
    second line
    ...
    end line
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="directives"&gt;
&lt;h2&gt;指令（ Directives ）&lt;/h2&gt;
&lt;p&gt;指令（ &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#directives"&gt;Directives&lt;/a&gt; ）是显式标记的通用块，是 reST 的扩展机制之一。
指令格式:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. directive-type:: directive-block
&lt;/pre&gt;
&lt;p&gt;由显示标记引导符（.. ）标识，后跟指令类型，两个冒号和空格（以上称之为“指令标记”）。
指令块则由指令标记后的文本和其后缩进的文本组成，对指令块的解释由指令代码负责，在指令块中可以包含以下三项内容（随意组合）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;指令参数&lt;/li&gt;
&lt;li&gt;指令选项&lt;/li&gt;
&lt;li&gt;指令内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-11"&gt;
&lt;h2&gt;图片指令&lt;/h2&gt;
&lt;p&gt;使用 &lt;a class="reference external" href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#image"&gt;图片指令&lt;/a&gt; 可以在文档中包含图片，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. image:: picture.jpeg
&lt;/pre&gt;
&lt;p&gt;图片指令有一个必选参数，和多个可选选项:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. image:: picture.jpeg
    :height: 100px
    :width: 200 px
    :scale: 50 %
    :alt: alternate text
    :align: right
    :class: common options
    :name: common options
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="rst"></category><category term="ReStructuredText"></category></entry><entry><title>将音频（视频）转录为文字</title><link href="https://recozo.github.io/speech-recognition.html" rel="alternate"></link><published>2023-01-22T23:44:21+08:00</published><updated>2023-01-22T23:44:21+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2023-01-22:/speech-recognition.html</id><summary type="html">&lt;p&gt;以下操作在 Windows 10 环境下&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;下载 Virtual Audio Cable。下载地址：&lt;a class="reference external" href="https://www.vb-audio.com/Cable/index.htm"&gt;https://www.vb-audio.com/Cable/index.htm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装后，会生成了二个虚拟设备：CABLE Input 和 CABLE Output，并且被分别设 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;以下操作在 Windows 10 环境下&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;下载 Virtual Audio Cable。下载地址：&lt;a class="reference external" href="https://www.vb-audio.com/Cable/index.htm"&gt;https://www.vb-audio.com/Cable/index.htm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装后，会生成了二个虚拟设备：CABLE Input 和 CABLE Output，并且被分别设置为播放和录制的默认设备；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时你会发现播放音频或视频没有声音了，你可以理解为声音已经被传送至 CABLE Input 了，并且被作为 CABLE Output 的输入了，
也就是我们已经将音频或视频的声音作为话筒的输入了。
如果你录制的同时还想听到音频或视频的声音，可以打开 CABLE Output 的属性，点击 &lt;em&gt;侦听&lt;/em&gt; 面板，选择 &lt;em&gt;侦听此设备&lt;/em&gt; ，然后 &lt;em&gt;通过此设备播放&lt;/em&gt; 选择你的实际播放设备即可。
也可以继续下载VB-Audio Additional Virtual Cables，那么还可以另外再创建4个虚拟声卡；
想玩大点的（如声音混合等），可以下载该网站的其它软件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;下载 youtube 视频&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;通过在youtube链接中插入my，即可以在线下载该视频，缺点是不支持1080P或以上，不支持选择视频分辨率，也不支持只下载音频；
假如 youtube 地址是 &lt;a class="reference external" href="https://www.youtube.com/watch?v=q2adWg-Ct6Y"&gt;https://www.youtube.com/watch?v=q2adWg-Ct6Y&lt;/a&gt; ，只须将地址更换为 &lt;a class="reference external" href="https://www.youtubemy.com/watch?v=q2adWg-Ct6Y"&gt;https://www.youtubemy.com/watch?v=q2adWg-Ct6Y&lt;/a&gt; ，就会出现下载界面。&lt;/li&gt;
&lt;li&gt;通过桌面程序下载，目前我正在使用的是 4K Video Downloader ，主要是因为可以免费使用，并支持下载 youtube 的视频文件或只下载音频文件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;打开网页 &lt;a class="reference external" href="https://www.textfromtospeech.com/zh/voice-to-text/"&gt;https://www.textfromtospeech.com/zh/voice-to-text/&lt;/a&gt; ，通过播放你下载的视频或音频文件，即可在线转录成文字了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用这个网站是因为发现国内访问速度还行，谷歌也有在线转录功能，但是由于延时太长，导致转录效果不佳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;如何将文字转换为语音&lt;/h2&gt;
&lt;p&gt;win10 环境下，无需安装第三方软件，利用 edge 浏览器的朗读功能和录音机功能实现。&lt;/p&gt;
&lt;p&gt;edge 可以通过在地址栏使用 &lt;a class="reference external" href="file://d:/filename.txt"&gt;file://d:/filename.txt&lt;/a&gt; 打开本地文件，这样的话无须网站支持。&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="speech recognition"></category></entry><entry><title>SSH 使用说明</title><link href="https://recozo.github.io/ssh-skills.html" rel="alternate"></link><published>2023-01-22T23:44:21+08:00</published><updated>2023-01-22T23:44:21+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2023-01-22:/ssh-skills.html</id><summary type="html">&lt;div class="section" id="ssh-1"&gt;
&lt;h2&gt;安装 SSH&lt;/h2&gt;
&lt;p&gt;检查 SSH 是否安装:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ apt list --installed | grep ssh
## 如果没有安装
$ sudo apt install openssh-client
&lt;/pre&gt;
&lt;p&gt;如果已经安装，是否需要重新生成 SSH 服务器端钥匙？
如是批安 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="ssh-1"&gt;
&lt;h2&gt;安装 SSH&lt;/h2&gt;
&lt;p&gt;检查 SSH 是否安装:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ apt list --installed | grep ssh
## 如果没有安装
$ sudo apt install openssh-client
&lt;/pre&gt;
&lt;p&gt;如果已经安装，是否需要重新生成 SSH 服务器端钥匙？
如是批安装，或者复制的虚拟机等……
通过以下命令重新生成 SSH 服务端钥匙:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd /etc/ssh/
$ sudo mkdir old_keys
$ sudo mv ssh_host_* old_keys/
$ sudo dpkg-reconfigure openssh-server
$ sudo systemctl restart ssh.service
&lt;/pre&gt;
&lt;p&gt;以上重新生成钥匙的操作不会中断当前的 SSH 会话，也就是说可以通过远程 SSH 会话对服务端钥匙重新进行配置。&lt;/p&gt;
&lt;p&gt;重新生成 SSH 服务端钥匙后需要更新客户端的 known_hosts 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
## 在原来访问过该 SSH 服务的客户端上执行
## 执行 ssh username&amp;#64;remote-server-name 查看错误提示
$ ssh-keygen -R &amp;quot;remote-server-name-here&amp;quot;
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference internal" href="#autossh-systemd-service"&gt;直接查看实际配置文件&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh-x-forwarding"&gt;
&lt;h2&gt;SSH 桌面转发（X Forwarding）&lt;/h2&gt;
&lt;p&gt;要使用桌面转发，SSH 服务器端必须安装 xauth(1) 应用程序（在国产系统中，如银河麒麟 v10，默认没有安装）。如果该应用程序存在，则只需要在 sshd_config 启用桌面转发:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
X11Forwarding yes
&lt;/pre&gt;
&lt;p&gt;在 SSH 客户端也可以通过在 ssh_config 中进行设置以使用桌面转发，不过使用命令行直接使用桌面转发更安全与更快捷:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -CX server          # C压缩传输，X启用桌面转发，进入后，运行桌面程序时，桌面会转发至本机显示
ssh -CY server          # C压缩传输，Y启用桌面转发，与X相比，Y对桌面程序更信任，授权给多，正常用X即可
ssh -f server command   # 直接执行命令，此时 ssh 在后台运行，返回命令提示符，并在远程服务器执行命令(命令也可以是桌面程序)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh-2"&gt;
&lt;h2&gt;SSH（隧道）端口转发&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;本地端口转发，常用于将不安全地协议进行加密通讯:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -L localIP:localport:remoteIP:remoteport hostname

# 也可以省略 localIP 此时默认使用客户端的 127.0.0.1 地址
ssh -L localport:remoteIP:remoteport hostname

# 考虑安全，远程服务器地址也应该为 127.0.0.1，因为该回调地址仅本机可访问
ssh -L 8080:127.0.0.1:80 serverNameOrIP

如以上最后一条命令，通过访问本机的8080端口，即可以访问远程服务器的80端口，将原来未加密传输的网站内容通过 SSH 进行加密。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;远程端口转发，常用于访问防火墙之后的服务:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -R remoteIP:remoteport:localIP:localport hostname

# 也可以省略 remoteIP 此时默认使用远程服务器端的 127.0.0.1 地址
ssh -R remoteport:localIP:localport hostname

# 考虑安全，本地客户端地址也应该为 127.0.0.1 或 localhost，因为该回调地址仅本机可访问
ssh -R 2222:localhost:22 serverNameOrIP

如以上最后一条命令运行后，在 serverNameOrIP 上的用户，通过使用如下命令::

serverNameOrIP $ ssh -p 2222 localhost

即可越过防火墙限制，通过2222端口反过来访问本地客户端机器的服务，如 SSH 或 WEB，即借助现有的 SSH 连接创建了一个隧道以访问本地客户端机器的服务。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;动态端口转发，常用于SOCKS代理:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -D localaddress:localport hostname

# 也可以省略 localaddress 此时默认使用 127.0.0.1 地址
ssh -D 9999 hostname

如以上最后一条命令运行后，你可以配置本机浏览器使用 127.0.0.1:9999 SOCKS 代理上网，此时将通过 SSH 服务器上网。
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在后台使用转发功能:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -fNL 2222:localhost:22 hostname &amp;amp;
&lt;/pre&gt;
&lt;p&gt;选项请自行使用 man 。&lt;/p&gt;
&lt;p&gt;其它与转发有关的配置项有，在 sshd_config 中的 AllowTcpForwarding 可以控制是否允许端口转发，
在 ssh_config 和 sshd_config 中的 GatewayPorts 可决定是否允许除 127.0.0.1 的 IP 地址进行转发。&lt;/p&gt;
&lt;p&gt;TLDR&lt;/p&gt;
&lt;p&gt;端口转发主要用途：&lt;/p&gt;
&lt;p&gt;Where local port forwarding is usually used to wrap a service with
encryption, remote port forwarding is used to access a service behind a
firewall&lt;/p&gt;
&lt;p&gt;本地端口转发（正向代理）：相当于 iptable 的 port forwarding:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -L 5000:localhost:3306 remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;p&gt;远程端口转发（反向代理）：相当于 frp 或者 ngrok:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -R 5000:localhost:80 remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;p&gt;如要长期高效的服务，应使用对应的专用软件。如没法安装软件，比如当你处在限制环境下想要访问下某个不可达到的目标，或者某个临时需求，那么 ssh 就是你的兜底方案。&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h3&gt;本地端口转发：&lt;/h3&gt;
&lt;p&gt;在本地启动端口，把本地端口数据转发到远程服务器，使得远程端口本地可以访问（如用于代理）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -L [&amp;lt;LocalAddress&amp;gt;]:&amp;lt;LocalPort&amp;gt;:&amp;lt;RemoteHost&amp;gt;:&amp;lt;RemotePort&amp;gt; remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%" /&gt;
&lt;col width="91%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;参数&lt;/th&gt;
&lt;th class="head"&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;LocalAddress&lt;/td&gt;
&lt;td&gt;可选参数，如果未指定，远程端口会绑定在本地的所有接口（0.0.0.0），因而也可以仅绑定到本地的 127.0.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LocalPort&lt;/td&gt;
&lt;td&gt;本地端口，该端口接收到的数据会转发至远程服务器进行处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RemoteHost&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;远程服务器（remoteServer）上的守护进程所监听的接口，可以是 127.0.0.1，localhost，实际 IP 地址或者 0.0.0.0 （表示所有接口）。
如果不确定 ，可以执行以下命令查看:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
netstat -an | grep 3306 | grep LISTEN
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RemotePort&lt;/td&gt;
&lt;td&gt;远程服务器（remoteServer）上的实际端口，与 RemoteHost 一起用于接收本地端口（LocalPort）转发的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;remoteUser&lt;/td&gt;
&lt;td&gt;远程服务器（remoteServer）上的 SSH 用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;remoteServer&lt;/td&gt;
&lt;td&gt;远程服务器地址（IP或主机名）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：通过本地端口 5000 远程访问 MySQL 服务器:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -L 5000:localhost:3306 sqlUser&amp;#64;MySQLServer
## 或者
ssh -L 127.0.0.1:5000:localhost:3306 sqlUser&amp;#64;MySQLServer
mysql --host=127.0.0.1 --port=5000
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h3&gt;远程端口转发：&lt;/h3&gt;
&lt;p&gt;让远端服务器启动端口，把远端端口数据转发到本地，使得本地端口远程可以访问（如用于内网穿透）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -R [&amp;lt;RemoteAddress&amp;gt;]:&amp;lt;RemotePort&amp;gt;:&amp;lt;LocalHost&amp;gt;:&amp;lt;LocalPort&amp;gt; remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%" /&gt;
&lt;col width="91%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;参数&lt;/th&gt;
&lt;th class="head"&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;RemoteAddress&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;可选参数，如果未指定，远程端口会绑定在远程服务器的所有接口（0.0.0.0，但是只会在 Loopback 接口上启用？），因而也可以仅绑定到特定的接口。
注意：如果指定了 RemoteAddress ，必须启用远程服务器上的 GatewayPorts 选项:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
$ vim /etc/ssh/sshd_config
GatewayPorts yes
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RemotePort&lt;/td&gt;
&lt;td&gt;远程服务器（remoteServer）上的实际端口，与 RemoteAddress 一起用于接收数据，接收到的数据会转发至本地进行处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LocalHost&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;本地守护进程所监听的接口，可以是 127.0.0.1，localhost，实际 IP 地址或者 0.0.0.0 （表示所有接口）。
如果不确定 ，可以执行以下命令查看:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
netstat -an | grep 80 | grep LISTEN
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LocalPort&lt;/td&gt;
&lt;td&gt;本地的实际端口，与 LocalHost 一起用于接收远程服务器转发过来的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;remoteUser&lt;/td&gt;
&lt;td&gt;远程服务器（remoteServer）上的 SSH 用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;remoteServer&lt;/td&gt;
&lt;td&gt;远程服务器地址（IP或主机名）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：通过远程服务器（公网地址：109.239.48.64）的端口 5000 访问本地的网站:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -R 5000:localhost:80 remoteUser&amp;#64;remoteServer
## 或者
ssh -R 109.239.48.64:5000:localhost:80 remoteUser&amp;#64;remoteServer
## 通过浏览器访问以下地址即可访问本地的网站内容
http://109.239.48.64:5000
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="root"&gt;
&lt;h3&gt;使用1024以下端口需要 root 权限&lt;/h3&gt;
&lt;p&gt;所有系统用户都可以分配1024以上的端口号，但是1024（不含）需要 root 权限，
本地转发时，如果要分配1024以下的本地端口，你需要使用 root 用户或 sudo 执行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ssh -L 50:localhost:3306 remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;p&gt;远程转发时，如果要分配1024以下的远程端口，你必须使用 root 用户进行 SSH 连接:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -R 50:localhost:80 root&amp;#64;remoteServer
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;使用优化（隧道选项）&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="88%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;常用参数&lt;/th&gt;
&lt;th class="head"&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;-N&lt;/td&gt;
&lt;td&gt;After you connect just hang there (you won’t get a shell prompt)
SSH man: Do not execute a remote command.
Note: Only works with SSHv2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-T&lt;/td&gt;
&lt;td&gt;Disable pseudo-terminal allocation.
This makes it also safe for binary file transfer which might contain escape characters such as ~C.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;Requests ssh to go to background just before command execution.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;Port to connect to on the remote host.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;Selects a file from which the identity (private key) for public key authentication is read.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用以上参数构建的命令如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -f -T -N -L 5000:localhost:3306 remoteUser&amp;#64;remoteServer -p 1022 -i ~/.ssh/id_rsa-remoteuser&amp;#64;remoteserver
&lt;/pre&gt;
&lt;p&gt;如果不想每次输入这么长的命令，可以使用 ~/.ssh/config 。&lt;/p&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;添加用户与主机&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ vim ~/.ssh/config
Host cli
    HostName        remoteServer
    User            remoteUser
&lt;/pre&gt;
&lt;p&gt;以上为用户与主机创建了一个别名 cli，可以将命令简化为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -f -T -N -L 5000:localhost:3306 cli -p 1022 -i ~/.ssh/id_rsa-remoteuser&amp;#64;remoteserver
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;添加端口和证书文件&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ vim ~/.ssh/config
Host cli
    HostName        remoteServer
    User            remoteUser
    Port            1022
    IdentityFile    ~/.ssh/id_rsa-remoteuser&amp;#64;remoteserver
&lt;/pre&gt;
&lt;p&gt;现在可以将命令简化为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -f -T -N -L 5000:localhost:3306 cli
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;添加隧道配置&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ vim ~/.ssh/config
Host cli-mysql-tunnel
    HostName        remoteServer
    User            remoteUser
    Port            1022
    IdentityFile    ~/.ssh/id_rsa-remoteuser&amp;#64;remoteserver
    LocalForward    5000 localhost:3306
&lt;/pre&gt;
&lt;p id="ssh-by-config"&gt;现在可以将命令简化为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh -f -T -N cli-mysql-tunnel
&lt;/pre&gt;
&lt;p&gt;对照 &lt;a class="reference internal" href="#autossh-by-config"&gt;autossh by config&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="autossh"&gt;
&lt;h2&gt;使用 AUTOSSH&lt;/h2&gt;
&lt;p&gt;SSH 没有断线重连功能，可以使用 autossh 自动重建会话或隧道。&lt;/p&gt;
&lt;p&gt;TLDR&lt;/p&gt;
&lt;pre class="literal-block"&gt;
autossh -M 0 -o &amp;quot;ServerAliveInterval 30&amp;quot; -o &amp;quot;ServerAliveCountMax 3&amp;quot; -L 5000:localhost:3306 remoteUser&amp;#64;remoteServer
&lt;/pre&gt;
&lt;p&gt;或者基于 ~/.ssh/config 配置在后台运行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
autossh -M 0 -f -T -N cli-mysql-tunnel
&lt;/pre&gt;
&lt;div class="section" id="autossh-1"&gt;
&lt;h3&gt;安装 autossh&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
sudo apt install autossh
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;用法&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
autossh [-V] [-M monitor_port[:echo_port]] [-f] [SSH_OPTIONS]

## 如以上通过本地5000端口转发 MySQL
ssh -L 5000:localhost:3306 sqlUser&amp;#64;MySQLServer
## 使用 autossh 命令
autossh -L 5000:localhost:3306 sqlUser&amp;#64;MySQLServer
&lt;/pre&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 autossh 前，请使用 ssh 先进行操作并确保无误；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;autossh 的 -f 选项不会传递至 ssh，因此必须使用公私钥匙进行认证，不支持基于密码或私钥密码认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;生成用户的 ssh 密钥，记得私钥不能启用私钥密码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-keygen                                  # 生成 ssh 使用的密钥
ssh-copy-id remoteUser&amp;#64;remoteServer         # 将公钥安装到远程服务器
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="autossh-m"&gt;
&lt;h3&gt;autossh 的 -M 选项&lt;/h3&gt;
&lt;p&gt;Setting the monitor port to 0 turns the monitoring function off,
and autossh will only restart ssh upon ssh's exit.
For example, if you are using a recent version of OpenSSH,
you may wish to explore using the ServerAliveInterval and ServerAliveCountMax options to have the SSH client exit
if it finds itself no longer connected to the server.
In many ways this may be a better solution than the monitoring port.&lt;/p&gt;
&lt;p&gt;以上内容来自 man autossh。&lt;/p&gt;
&lt;p&gt;因此推荐方式是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
autossh -M 0 -o &amp;quot;ServerAliveInterval 30&amp;quot; -o &amp;quot;ServerAliveCountMax 3&amp;quot;
&lt;/pre&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;选项&lt;/th&gt;
&lt;th class="head"&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;ServerAliveInterval&lt;/td&gt;
&lt;td&gt;Sets a timeout interval in seconds after which if no data has been received from the server,
ssh(1) will send a message through the encrypted channel to request a re‐ sponse from the server.
The default is 0, indicating that these messages will not be sent to the server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ServerAliveCountMax&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;Sets the number of server alive messages which may be sent without ssh(1) receiving any messages back from the server.
If this threshold is reached while server alive messages are being sent,
ssh will disconnect from the server, terminating the session.&lt;/p&gt;
&lt;p class="last"&gt;The default value is 3.
If, for example, ServerAliveInterval is set to 15 and ServerAliveCountMax is left at the default,
if the server becomes unresponsive, ssh will disconnect after approximately 45 seconds.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="autossh-ssh-config"&gt;
&lt;h3&gt;autossh 与 ~/.ssh/config&lt;/h3&gt;
&lt;p&gt;autossh 也支持 ~/.ssh/config，因此可以继续使用配置文件进行有关的设置，
继续以上面的配置文件为例，加入 ServerAliveInterval 和 ServerAliveCountMax 二个选项:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vim ~/.ssh/config
Host cli-mysql-tunnel
    HostName        remoteServer
    User            remoteUser
    Port            1022
    IdentityFile    ~/.ssh/id_rsa-remoteuser&amp;#64;remoteserver
    LocalForward    5000 localhost:3306
    ServerAliveInterval     30
    ServerAliveCountMax     3
&lt;/pre&gt;
&lt;p id="autossh-by-config"&gt;现在我们可以使用以下命令确保断线重连了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
autossh -M 0 -f -T -N cli-mysql-tunnel
&lt;/pre&gt;
&lt;p&gt;对照 &lt;a class="reference internal" href="#ssh-by-config"&gt;ssh by config&lt;/a&gt; ,
注意 -f 不会传递给 ssh。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autossh-2"&gt;
&lt;h3&gt;autossh 环境变量&lt;/h3&gt;
&lt;p&gt;autossh 也可以通过一些环境变量进行控制，其中比较重要的一个变量是 AUTOSSH_GATETIME:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;AUTOSSH_GATETIME&lt;/dt&gt;
&lt;dd&gt;Specifies how long ssh must be up before we consider it a successful connection.
The default is 30 seconds.
Note that if AUTOSSH_GATETIME is set to 0, then not only is the gatetime behaviour turned off,
but autossh also ignores the first run failure of ssh.
This may be useful when running autossh at boot.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;其它变量说明请自行参阅 man&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autossh-systemd-service"&gt;
&lt;h3&gt;autossh systemd service&lt;/h3&gt;
&lt;p&gt;可以通过 systemd 在启动时自动建立转发隧道，不过需要注意的是：
autossh -f 在 systemd 环境下不受支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;客户端&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;客户端的 systemd 配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install autossh

# vi /etc/systemd/system/autossh-reverse-tunnel.service
[Unit]
Description=AutoSSH reverse tunnel service
After=network.target

[Service]
Restart=always
RuntimeMaxSec=86400
Environment=&amp;quot;AUTOSSH_GATETIME=0&amp;quot;
ExecStart=/usr/bin/autossh -M 0 -o &amp;quot;ServerAliveInterval 30&amp;quot; -o &amp;quot;ServerAliveCountMax 3&amp;quot; -NR 2221:localhost:22 sshtunnel&amp;#64;remoteserver -p 222

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用客户端:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# systemctl daemon-reload

# systemctl start autossh-reverse-tunnel.service

# systemctl enable autossh-reverse-tunnel.service
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;服务端&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;SSH 服务配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/ssh/sshd222_config

Port 222
PermitRootLogin no
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PrintMotd no
Banner none
PidFile /var/run/sshd222.pid
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;创建用户:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# useradd -d /home/sshtunnel -s /bin/false -m sshtunnel
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;SSH 密钥仅限于隧道:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# mkdir /home/sshtunnel/.ssh

# vi /home/sshtunnel/.ssh/authorized_keys

no-pty,no-X11-forwarding,permitopen=&amp;quot;localhost:2221&amp;quot;,command=&amp;quot;/bin/echo do-not-send-commands&amp;quot; ssh-rsa VeryLongsShkeyBlaBlaBlaBla root&amp;#64;hostname
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;systemd 配置文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/systemd/system/ssh222.service

[Unit]
Description=OpenBSD Secure Shell server
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target auditd.service
ConditionPathExists=!/etc/ssh/sshd_not_to_be_run

[Service]
EnvironmentFile=-/etc/default/ssh
ExecStartPre=/usr/sbin/sshd -t -f /etc/ssh/sshd222_config
ExecStart=/usr/sbin/sshd -D $SSHD_OPTS -f /etc/ssh/sshd222_config
ExecReload=/usr/sbin/sshd -t -f /etc/ssh/sshd222_config
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
Type=notify
RuntimeDirectory=sshd
RuntimeDirectoryMode=0755

[Install]
WantedBy=multi-user.target
Alias=sshd.service
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;服务端启用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# systemctl daemon-reload

# systemctl start ssh222.service

# systemctl enable ssh222.service
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="ssh"></category></entry><entry><title>Linux Firewalls</title><link href="https://recozo.github.io/linux-firewalls.html" rel="alternate"></link><published>2022-06-19T14:34:00+08:00</published><updated>2022-06-19T14:34:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2022-06-19:/linux-firewalls.html</id><summary type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;第二章 包过滤概念&lt;/h2&gt;
&lt;p&gt;什么是防火墙?多年来，这个词的含义发生了变化。根据RFC 2647“防火墙性能基准术语”，
防火墙是“在网络之间 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;第二章 包过滤概念&lt;/h2&gt;
&lt;p&gt;什么是防火墙?多年来，这个词的含义发生了变化。根据RFC 2647“防火墙性能基准术语”，
防火墙是“在网络之间执行访问控制策略的设备或设备组”。这个定义很宽泛，实际上是有目的的。
防火墙可以包含OSI模型的许多层，可能指的是一个设备，它可以进行包过滤、执行包检查和过滤、
在较高层的应用程序上实现策略，或者执行其中的任何一层或更多。&lt;/p&gt;
&lt;p&gt;无状态或无状态防火墙通常只基于OSI模型的IP层(第3层)执行一些包过滤，尽管有时这种类型的
防火墙涉及更高层的协议。这类设备的一个示例可能包括位于网络边缘的边界路由器，它实现一个
或多个访问列表，以防止各种类型的恶意流量进入网络。有些人可能会说这类设备根本就不是防火墙。
然而，它显然符合RFC的定义。&lt;/p&gt;
&lt;p&gt;边界路由器访问列表可能会根据接收报文的接口实现许多不同的策略。通常在连接到Internet的
网络边缘过滤某些包。这些包将在本章后面讨论。&lt;/p&gt;
&lt;p&gt;与无状态防火墙相反，有状态防火墙跟踪以前在给定会话中看到的信息包，并根据给定连接中已经
看到的内容对信息包应用访问策略。有状态防火墙还包含无状态防火墙的基本包过滤功能。
例如，有状态防火墙将跟踪TCP三向握手的各个阶段，并拒绝在握手中出现顺序不一致的数据包。
由于没有连接，UDP处理有状态防火墙有些困难，因为没有状态可言。然而，有状态防火墙跟踪
最近的UDP交换，以确保已接收的数据包与最近的传出数据包相关。&lt;/p&gt;
&lt;p&gt;应用程序级网关(ALG)，有时被称为应用层网关，是另一种形式的防火墙。与无状态防火墙不同，
无状态防火墙具有网络层和可能的传输层的知识，ALG主要处理第7层，即OSI模型的应用层。
alg通常对所传递的应用程序数据有深入的了解，因此可以查找与相关应用程序的正常流量有任何偏差。&lt;/p&gt;
&lt;p&gt;ALG通常驻留在客户机和实服务器之间，并且在所有意图和目的下，模拟实服务器对客户机的行为。
实际上，本地流量永远不会离开局域网，而远程流量永远不会进入局域网。&lt;/p&gt;
&lt;p&gt;ALG有时也指辅助另一个防火墙的模块或软件。许多防火墙都附带一个FTP ALG来支持FTP的端口模式
数据通道，其中客户端告诉服务器要连接到哪个本地端口，以便它可以打开数据通道。服务器启动传入的
数据通道连接(然而，通常是客户机启动所有连接)。多媒体会话通常使用两端发起的多个连接，通常
同时使用TCP和UDP协议，因此需要alg通过防火墙通过多媒体协议。&lt;/p&gt;
&lt;p&gt;ALG是代理。另一种形式的代理是电路级代理。电路级代理通常不具有特定于应用程序的知识，
但它们可以强制执行访问和授权策略，并充当端到端连接中的终止点。SOCKS是一个电路级代理的例子。
代理服务器充当连接双方的终止点，但是服务器不具有任何应用程序特定的知识。&lt;/p&gt;
&lt;p&gt;在每一种情况下，防火墙的目的都是强制您定义的访问控制或安全策略。安全策略本质上是关于
访问控制的——允许和不允许谁在您控制的服务器和网络上执行哪些操作。&lt;/p&gt;
&lt;p&gt;虽然不一定特定于防火墙，但防火墙很多时候发现自己在执行额外的任务，其中一些可能包括
网络地址转换(NAT)、反病毒检查、事件通知、URL过滤、用户身份验证和网络层加密。&lt;/p&gt;
&lt;p&gt;本书涵盖了包过滤防火墙背后的思想，包括静态的和动态的，或无状态的和有状态的。上面提到的
每一种方法都控制哪些服务可以被访问以及由谁访问。基于不同OSI参考模型层的不同信息，
每种方法都有其优点和优势。&lt;/p&gt;
&lt;p&gt;第一章“包过滤防火墙的基本概念”，介绍了防火墙的概念和信息基础。本章介绍如何使用这些信息实现防火墙规则。&lt;/p&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h3&gt;包过滤防火墙&lt;/h3&gt;
&lt;p&gt;在最基本的级别上，包过滤防火墙由一列接受和拒绝规则组成。这些规则明确地定义了哪些
数据包可以通过网络接口，哪些数据包不可以通过网络接口。防火墙规则使用第1章中描述的
信息包头字段来决定是将信息包转发到目的地，还是静默地丢弃信息包，还是阻止信息包并
向发送机器返回一个错误条件。这些规则可以基于各种各样的因素，包括源或目的IP地址、
源和(更常见的)目的端口，以及单个数据包的部分，如TCP头标志、协议类型、MAC地址等。&lt;/p&gt;
&lt;p&gt;MAC地址过滤在连接互联网的防火墙中并不常见。通过MAC过滤，防火墙可以阻止或只允许
某些MAC地址。然而，十有八九你只看到一个MAC地址，就是防火墙上游路由器上的那个。
这意味着，在你的防火墙所能看到的范围内，互联网上的每台主机看起来都有相同的MAC地址。
新防火墙管理员的一个常见错误是试图在Internet防火墙上使用MAC过滤。&lt;/p&gt;
&lt;p&gt;使用混合的TCP/IP参考模型，包过滤防火墙在网络层和传输层发挥作用，如图2.1所示。&lt;/p&gt;
&lt;p&gt;总体思路是，您需要非常小心地控制Internet和您直接连接到Internet的机器之间传递的内容。
在Internet的外部接口上，您可以分别过滤从外部进入的内容和从机器输出的内容，
尽可能精确和明确。&lt;/p&gt;
&lt;p&gt;对于单机设置，将网络接口视为I/O对可能会有所帮助。防火墙独立地过滤通过接口
进入和流出的内容。输入过滤和输出过滤可能具有完全不同的规则。
图2.2描述了在流程图中对规则的处理。&lt;/p&gt;
&lt;p&gt;这听起来很有力，确实如此;但这并不是一个万无一失的安全机制。这只是故事的一部分，
只是数据安全的多层方法中的一层。并不是所有的应用程序通信协议都支持包过滤。
这种类型过滤太低级，不支持细粒度的身份验证和访问控制。这些安全服务必须
在更高的级别提供。IP没有能力验证发送者是他或她声称的那个人。在这个级别上
唯一可用的标识信息是IP包报头中的源地址。可以很容易地修改源地址。再往上一层，
网络层和传输层都无法验证应用程序数据是否正确。然而，包级别允许对直接端口访问、
包内容和正确的通信协议进行更大、更简单的控制，这比在更高级别上容易或方便地做到的要多。&lt;/p&gt;
&lt;p&gt;如果没有包级别的过滤，更高级别的过滤和代理安全措施要么无效，要么可能无效。
至少在某种程度上，它们必须依赖于底层通信协议的正确性。安全协议栈中的每一层都
添加了其他层无法轻易提供的部分。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3&gt;选择默认包过滤策略&lt;/h3&gt;
&lt;p&gt;如本章前面所述，防火墙是实现访问控制策略的设备。这个策略的很大一部分是关于
默认防火墙策略的决定。默认防火墙策略有两种基本方法:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;缺省情况下拒绝所有报文，并显式地允许选定的数据包通过。&lt;/li&gt;
&lt;li&gt;默认接受所有内容，并明确拒绝所选数据包通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毫无疑问，“拒绝一切”的政策是推荐的方法。这种方法可以更容易地设置安全的防火墙，
但是必须显式地启用您想要的每个服务和相关协议事务(参见图2.3)。这意味着您必须了解
您所启用的每个服务的通信协议。“拒绝一切”方法需要更多的前期工作来启用互联网访问。
一些商业防火墙产品只支持“拒绝一切”策略&lt;/p&gt;
&lt;p&gt;“接受一切”策略使立即启动和运行变得容易得多，但它迫使您预期可能希望禁用的所有访问类型
(请参见图2.4)。危险在于，直到为时已晚时，您才会预料到危险的访问类型，或者稍后启用
不安全的服务，而没有首先阻止对它的外部访问。最后，开发一个安全的可接受一切的防火墙
需要更多的工作，更困难，几乎总是更不安全，因此也更容易出错。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;包的拒绝与丢弃&lt;/h3&gt;
&lt;p&gt;iptables和nftables中的Netfilter防火墙机制为您提供了拒绝或丢弃数据包的选择。
有什么区别呢?如图2.5所示，当一个报文被拒绝时，该报文将被丢弃，并向发送方返回
一个ICMP错误消息。当一个信息包被丢弃时，信息包被简单地丢弃，而不向发送方发出任何通知。&lt;/p&gt;
&lt;p&gt;静默地丢弃数据包几乎总是更好的选择，原因有三。
首先，发送错误响应会使网络流量加倍。大多数丢失的信息包之所以丢失，是因为它们是恶意的，
而不是因为它们代表了访问您不碰巧提供的服务的无害尝试。
其次，您响应的数据包可以用于拒绝服务(DoS)攻击。
第三，任何响应(甚至是错误消息)都会向潜在的攻击者提供有用的信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;过滤输入包&lt;/h3&gt;
&lt;p&gt;外部接口I/O对的输入端，即输入规则集，在保护站点方面更有意义。如前所述，可以根据
源地址、目的地址、源端口、目的端口、TCP状态标志和其他条件进行过滤。在下面的部分中，
您将在某一点或另一点了解所有这些信息。&lt;/p&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h4&gt;远端源地址过滤&lt;/h4&gt;
&lt;p&gt;在信息包级别，识别IP信息包发送者的唯一方法是信息包头中的源地址。这一事实允许
源地址欺骗的可能性，在这种情况下，发送者在源字段中放置了一个不正确的地址，
而不是他或她自己的地址。这个地址可能是一个不存在的地址，也可能是一个属于其他人的合法地址。
这可能会允许令人讨厌的类型通过显示为本地可信流量来入侵您的系统;在攻击其他网站时
显示你的身份;在攻击你的时候假装成别人;让你的系统陷入僵局响应不存在的地址;或者以其他方式
误导您传入消息的来源。&lt;/p&gt;
&lt;p&gt;重要的是要记住，您通常无法检测到被欺骗的地址。该地址可能是合法和可路由的，但可能不属于
数据包的发送方。下一部分描述可以检测的欺骗地址。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h4&gt;源地址欺骗和非法地址&lt;/h4&gt;
&lt;p&gt;在所有情况下，都应该在外部接口上拒绝几种主要的源地址。这些是声称来自以下的传入数据包:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;您的IP地址—您永远不会看到声称来自您的机器的合法传入数据包。
因为源地址是唯一可用的信息，并且可以修改它，所以这是您可以在包过滤级别检测到的合法地址欺骗的一种形式。声称来自您机器的传入数据包是欺骗的。您无法确定其他传入数据包是否来自它们声称所在的地方。(请注意，如果某些操作系统收到源地址和目的地址都属于主机网络接口的数据包，它们就会崩溃。)&lt;/li&gt;
&lt;li&gt;您的局域网地址—您很少会在外部Internet接口上看到声称来自您的局域网的合法的
传入数据包。如果局域网对Internet有多个接入点，就有可能看到这样的数据包，
但这可能是本地网络配置错误的标志。在大多数情况下，这样的数据包是试图通过
利用本地信任关系来获得对站点的访问的一部分。&lt;/li&gt;
&lt;li&gt;A、B、C类私有IP地址—历史上A、B、C类范围内的三组地址为私有局域网保留使用。
它们不适合在互联网上使用。因此，这些地址可以被任何网站内部使用，而不需要
购买注册的IP地址。你的机器永远不会看到来自这些源地址的数据包:&lt;/li&gt;
&lt;li&gt;D类组播IP地址- D类范围内的IP地址在参与组播网络广播(如音频广播或视频广播)时
被留出作为目的地址。取值范围为224.0.0.0 ~ 239.255.255.255。您的机器永远
不应该看到来自这些源地址的数据包。&lt;/li&gt;
&lt;li&gt;E类保留IP地址- E类范围内的IP地址被预留给未来和实验使用，不公开分配。
取值范围为240.0.0.0 ~ 247.255.255.255。您的机器永远不应该
看到来自这些源地址的包—而且大多数情况下也不会看到。(因为整个地址范围
一直到255.255.255.255都是永久保留的，所以E类地址范围实际上可以定义为
240.0.0.0到255.255.255.255。事实上，一些源定义的E类地址范围正是这样。)&lt;/li&gt;
&lt;li&gt;环回接口地址—环回接口是Linux系统用于本地、基于网络的服务的私有网络接口。
操作系统不通过网络接口驱动程序发送本地流量，而是通过环回接口实现了一个快捷方式，
以提高性能。根据定义，环回流量是产生环回流量的系统的目标。它不会在网络上播出。
环回地址范围为127.0.0.0 ~ 127.255.255.255。您通常会看到它
被称为127.0.0.1,localhost，或环回接口，lo。&lt;/li&gt;
&lt;li&gt;格式错误的广播地址——广播地址是应用于网络上所有机器的特殊地址。
地址0.0.0.0是一个特殊的广播源地址。一个合法的广播源地址可以是0.0.0.0或者一个普通的IP地址。
DHCP客户端和服务器将看到来自源地址0.0.0.0的传入广播数据包。这是该源地址的唯一合法使用。
它不是一个合法的点对点单播源地址。当被视为常规的、点对点的、非广播的数据包中的源地址时，
该地址是伪造的，或者发送者没有完全配置。&lt;/li&gt;
&lt;li&gt;A类网络0地址-如前所述，任何在0.0.0.0到0.255.255.255范围内的源地址作为单播地址是不合法的。&lt;/li&gt;
&lt;li&gt;链接本地网络地址——当dhcp客户端无法从服务器获取地址时，他们有时会为自己分配一个链接本地地址。
这些地址的范围是169.254.0.0 ~ 169.254.255.255。&lt;/li&gt;
&lt;li&gt;电信级nat——有些ip被标记为供互联网提供商使用，但它们永远不应该出现在公共网络上。
但是，这些地址可以在云场景中使用，因此，如果您的服务器托管在云提供商处，您可能会看到这些地址。
运营商级NAT地址的取值范围为100.64.0.0 ~ 100.127.255.255。&lt;/li&gt;
&lt;li&gt;test - net地址—为测试网络保留192.0.2.0 ~ 192.0.2.255的地址空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h4&gt;阻止问题的网站&lt;/h4&gt;
&lt;p&gt;另一种常见的、但使用频率较低的源地址过滤方案是阻止来自选定机器的所有访问，
或者更典型的是阻止来自整个网络的IP地址块的所有访问。这就是互联网社区
处理问题网站和不监督用户的isp的方式。如果一个网站被认为是一个糟糕的网络邻居，
其他网站往往会全面封锁它。&lt;/p&gt;
&lt;p&gt;在个人层面，当远程网络中的个人习惯性地使自己感到讨厌时，阻止来自选定网络的所有访问是很方便的。
这在历史上一直被用作对抗未经请求的电子邮件的一种手段，有些人甚至会封锁整个国家的IP地址范围。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h4&gt;限制传入数据包到选定的远程主机&lt;/h4&gt;
&lt;p&gt;您可能希望仅从特定的外部站点或个人接收某些类型的传入数据包。在这些情况下，防火墙规则
将定义接收这些数据包的特定IP地址或有限范围的IP源地址。&lt;/p&gt;
&lt;p&gt;第一类传入数据包来自响应您请求的远程服务器。尽管有些服务(如web或FTP服务)可能来自任何地方，
但其他服务只能合法地来自您的ISP或特别选择的可信主机。服务器的例子可能只提供通过
您的ISP POP邮件服务，域名服务(DNS)名称服务器响应，以及可能的DHCP或动态IP地址分配。&lt;/p&gt;
&lt;p&gt;第二类传入数据包来自访问站点提供的服务的远程客户端。同样，尽管一些传入的服务连接
(比如到web服务器的连接)可能来自任何地方，但其他本地服务将只提供给少数可信任的远程用户或朋友。
受限制的本地服务的例子可能是ssh和ping。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h4&gt;本地目的地址过滤&lt;/h4&gt;
&lt;p&gt;根据目的地址过滤入站数据包并不是什么大问题。在正常操作下，您的网络接口卡会忽略
没有发送到它的常规数据包。广播报文除外，广播报文向网络中所有主机广播。&lt;/p&gt;
&lt;p&gt;IPv4地址255.255.255.255为通用广播目的地址。它是指直接物理网段上的所有主机，称为有限广播。
广播地址可以更明确地定义为给定IP地址子网中的最高地址。例如，如果您的ISP的网络地址
是192.168.10.0,24位子网掩码(255.255.255.0)，而您的IP地址是192.168.10.30，
您将看到从您的ISP发送到192.168.10.255的广播数据包。另一方面，如果你有一个较小的IP地址范围，
比如a /30(255.255.255.252)，那么你总共有四个地址:一个网络地址，两个主机地址，和广播地址。
以10.3.7.4/30网络为例。在这个网络中，10.3.7.4是网络地址，两个主机分别为10.3.7.5和10.3.7.6，
广播地址为10.3.7.7。这种/30子网配置类型通常在路由器之间使用，尽管实际地址本身可能不同。
要知道一个给定子网的广播地址是什么，唯一的方法是知道子网内的IP地址和子网掩码。
这些类型的广播被称为定向子网广播，并被交付给该网络上的所有主机。&lt;/p&gt;
&lt;p&gt;广播到目的地址0.0.0.0类似于前面“源地址欺骗和非法地址”一节中提到的点对点报文声称来自广播源地址的情况。
在这里，广播报文被定向到源地址0.0.0.0，而不是目的地址255.255.255.255。
在这种情况下，包的意图没有什么问题。这是将您的系统识别为Linux机器的尝试。由于历史原因，
从BSD UNIX派生的网络代码返回一个ICMP Type 3错误消息，以响应使用0.0.0.0作为广播目的地址。
其他操作系统会静默丢弃该数据包。因此，这是一个很好的例子，为什么丢弃和拒绝一个数据包会有不同。
在这种情况下，错误消息本身就是探针所寻找的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-11"&gt;
&lt;h4&gt;远端源端口过滤&lt;/h4&gt;
&lt;p&gt;从远程客户端到本地服务器的传入请求和连接将在非特权范围内拥有一个源端口。如果你的主机是
一个web服务器，那么所有连接到你的web服务器的源端口应该在1024到65535之间。
(服务器端口标识服务是目的，而不是保证。您不能确定您期望的服务器正在您期望的端口上运行。)&lt;/p&gt;
&lt;p&gt;来自您所联系的远程服务器的传入响应和连接将具有分配给特定服务的源端口。如果您连接到一个
远程网站，所有来自远程服务器的传入消息都将源端口设置为80(或本地客户端指定的任何端口)，
即http服务端口号。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-12"&gt;
&lt;h4&gt;本地目的端口过滤&lt;/h4&gt;
&lt;p&gt;传入数据包中的目的端口标识数据包在计算机上要用于的程序或服务。与源端口一样，从远程客户端
到服务的所有传入请求通常遵循相同的模式，而从远程服务到本地客户端的所有传入响应则遵循不同的模式。&lt;/p&gt;
&lt;p&gt;从远程客户端到本地服务器的传入请求和连接将把目标端口设置为分配给特定服务的服务编号。
例如，目的地为本地web服务器的传入数据包通常会将目的端口设置为80，即http服务端口号。&lt;/p&gt;
&lt;p&gt;来自您所联系的远程服务器的传入响应将具有一个在非特权范围内的目标端口。
如果您连接到一个远程网站，那么来自远程服务器的所有传入消息的目的端口将在1024到65535之间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tcp"&gt;
&lt;h4&gt;传入TCP连接状态过滤&lt;/h4&gt;
&lt;p&gt;传入的TCP数据包接收规则可以使用与TCP连接相关的连接状态标志。
所有TCP连接都遵循相同的连接状态集。这些状态在客户端和服务器之间是不同的，
因为在建立连接时需要进行三次握手。
因此，防火墙可以区分来自远程客户端的传入流量和来自远程服务器的传入流量。&lt;/p&gt;
&lt;p&gt;从远程客户端传入的TCP数据包将在作为三路连接建立握手的一部分
接收的第一个数据包中设置SYN标志。第一个连接请求将设置SYN标志，但不设置ACK标志。&lt;/p&gt;
&lt;p&gt;来自远程服务器的传入数据包将始终是对本地客户端程序发起的初始连接请求的响应。
从远程服务器接收的每个TCP包都将设置ACK标志。您的本地客户机防火墙规则将要求设置
来自远程服务器的所有传入数据包的ACK标志。服务器通常不会尝试发起到客户端程序的连接。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-13"&gt;
&lt;h3&gt;探测器和扫描&lt;/h3&gt;
&lt;p&gt;探测是尝试连接到单个服务端口或从单个服务端口获取响应。
扫描是对一组不同服务端口的一系列探测。扫描通常是自动化的。&lt;/p&gt;
&lt;p&gt;不幸的是，探针和扫描已经很少是无害的了。他们很可能处于初始信息收集阶段，
在发起攻击之前寻找有趣的漏洞。自动扫描工具很普遍，黑客团体的协同行动也很常见。
Internet上许多主机的安全性(或缺乏安全性)，以及蠕虫、病毒和僵尸机器的扩散，
使扫描成为Internet上一个持续存在的问题。&lt;/p&gt;
&lt;div class="section" id="section-14"&gt;
&lt;h4&gt;通用端口扫描&lt;/h4&gt;
&lt;p&gt;通用端口扫描是对大量服务端口(可能是整个范围)的不加区分的探测(参见图2.6)。
随着更复杂、更有针对性的隐身工具的出现，这些扫描在某种程度上不那么频繁——或者至少不那么明显。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-15"&gt;
&lt;h4&gt;目标端口扫描&lt;/h4&gt;
&lt;p&gt;目标端口扫描查找特定的漏洞(参见图2.7)。更新、更复杂的工具试图识别硬件、操作系统和软件版本。
这些工具旨在识别可能容易受到特定漏洞影响的目标。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-16"&gt;
&lt;h4&gt;通用业务端口目标器&lt;/h4&gt;
&lt;p&gt;常见的目标往往是单独探测和扫描。攻击者可能正在寻找特定的漏洞，
例如不安全的邮件服务器、未打补丁的web服务器或打开的远程过程调用(RPC) portmap守护进程。&lt;/p&gt;
&lt;p&gt;更多的端口列表可以在http://www.iana.org/assignments/portnumbers上找到。
这里只提到几个常见的端口，给你一个想法:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从保留端口0进入的报文总是虚假的。该端口未被合法使用。&lt;/li&gt;
&lt;li&gt;TCP端口0到5的探针是扫描程序的签名。&lt;/li&gt;
&lt;li&gt;SSH (22/tcp)、SMTP (25/tcp)、DNS (53/tcp/udp)、pop-3 (110/tcp)、
imap (143/tcp)和SNMP (161/udp)是首选的目标端口。
它们代表了系统的一些最潜在的易受攻击的开口，无论是本质上，由于常见的配置错误，
还是由于软件中的已知缺陷。因为这些服务太常见了，
它们很好地说明了为什么你不想向外部世界提供它们，或者非常小心地提供受控制的外部访问。
NetBIOS (137-139/tcp/udp)和服务器消息块(SMB)在Windows (445/tcp)探测中是非常常见的。
除非在系统上使用Samba，否则它们通常不会对Linux系统构成威胁。
在这种情况下，典型的目标是Windows系统，但扫描太常见了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-17"&gt;
&lt;h4&gt;隐形扫描&lt;/h4&gt;
&lt;p&gt;从定义上讲，隐形端口扫描并不意味着是可检测的。它们基于TCP协议栈如何响应意外的数据包，
或具有非法州标志组合的数据包。例如，假设一个传入数据包设置了ACK标志，但没有相关的连接。
如果ACK被发送到一个连接了监听服务器的端口，TCP堆栈将不会找到一个相关的连接，
并返回一个TCP RST消息，告诉发送者重置连接。如果ACK被发送到一个未使用的端口，
系统将简单地返回一个TCP RST消息作为错误指示，就像防火墙在默认情况下可能返回一个ICMP错误消息一样。&lt;/p&gt;
&lt;p&gt;这个问题更加复杂，因为有些防火墙只测试SYN标志或ACK标志。
如果两者都没有设置，或者信息包包含其他标志组合，则防火墙实现可能会将信息包传递给TCP代码。
根据TCP状态标志的组合和接收数据包的操作系统，系统将响应一个RST或沉默。
此机制可用于帮助识别目标系统正在运行的操作系统。在任何这些情况下，接收系统都不太可能记录事件。&lt;/p&gt;
&lt;p&gt;通过这种方式诱导目标主机生成RST报文，也可以用来映射网络，确定在网络上监听的系统的IP地址。
如果目标系统不是服务器，并且其防火墙已设置为静默地丢弃不需要的包，那么这尤其有用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-18"&gt;
&lt;h4&gt;避免偏执狂:响应端口扫描&lt;/h4&gt;
&lt;p&gt;防火墙日志通常显示各种失败的连接尝试。探测是您将在日志中看到的最常见的内容。&lt;/p&gt;
&lt;p&gt;人们经常这样窥探你的系统吗?是的,他们也是。您的系统是否受到威胁?不,它不是。
好吧,不一定。端口被阻塞。防火墙正在发挥作用。这些是防火墙拒绝的失败连接尝试。&lt;/p&gt;
&lt;p&gt;在什么情况下你个人会决定报告一项调查?什么时候它才重要到要花时间去报告呢?
什么时候你会说够了，然后继续你的生活，或者你应该每次都写abuse&amp;#64;some.system ?
没有“正确”的答案。您如何回应是一个个人的判断，部分取决于您可获得的资源，
您的网站上的信息有多敏感，以及互联网连接到您的网站有多关键。
对于明显的探测和扫描，没有明确的答案。这取决于你自己的个性和舒适程度，
你个人如何定义一个严肃的探索，以及你的社会良知。&lt;/p&gt;
&lt;p&gt;考虑到这一点，下面是一些可行的指导方针。&lt;/p&gt;
&lt;p&gt;最常见的尝试是自动探测、错误、基于互联网历史的合法尝试、无知、好奇和行为不端的软件的组合。&lt;/p&gt;
&lt;p&gt;对于您没有提供的公共服务，您几乎总是可以安全地忽略对telnet、ssh、ftp、finger
或任何其他端口的单独、隔离的单个连接尝试。探针和扫描是互联网生活中的一个事实，
它们太频繁了，通常不会造成风险。他们有点像挨家挨户的推销员，商业电话，错误的电话号码，和垃圾邮件。
至少对我来说，一天中没有足够的时间去回复每一个问题。&lt;/p&gt;
&lt;p&gt;另一方面，一些探针更持久。您可能决定添加防火墙规则来完全阻止它们，甚至可能阻止它们的整个IP地址空间。&lt;/p&gt;
&lt;p&gt;如果发现一个开放的端口，对已知存在潜在安全漏洞的端口子集的扫描通常是攻击的前兆。
更广泛的扫描通常是整个域或子网中更广泛的打开扫描的一部分。
当前的黑客工具一个接一个地探测这些端口的子集。&lt;/p&gt;
&lt;p&gt;偶尔，您会看到严重的黑客攻击。现在无疑是采取行动的时候了。写他们。报告他们。
仔细检查你的安全。观察他们在做什么。阻止他们。阻止他们的IP地址阻塞。&lt;/p&gt;
&lt;p&gt;有些系统管理员会认真对待每一次事件，因为即使他们的机器是安全的，其他人的机器可能也不安全。
下一个人甚至可能没有能力知道他或她正在被调查。为了每个人的利益，报告调查是一件对社会负责的事情。&lt;/p&gt;
&lt;p&gt;应该如何响应端口扫描?如果你写信给这些人，他们的邮政主管，他们的上行服务提供商网络操作中心(NOC)，
或网络地址块协调器，尽量礼貌一些。假定他们是无辜的。过度反应往往是错误的。
在你看来可能是一次严重的黑客尝试，通常是一个好奇的孩子在玩一个新程序。
对施虐者、根用户或邮政局长说一句礼貌的话，有时可以解决问题。
更多的人需要接受网络礼仪教育，而不是需要撤销他们的网络账户。他们可能是无辜的。
就像经常发生的那样，这个人的系统被破坏了，而这个人不知道发生了什么，并且会感激这些信息。&lt;/p&gt;
&lt;p&gt;然而，探测并不是你看到的唯一的恶意流量。虽然探测本身是无害的，但DoS攻击并非如此。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-19"&gt;
&lt;h4&gt;拒绝服务攻击&lt;/h4&gt;
&lt;p&gt;DoS攻击是基于这样的想法:用大量的数据包破坏或严重降低你的互联网连接，捆绑本地服务器，
使合法的请求无法得到满足，或者在最坏的情况下，使你的系统完全崩溃。
最常见的两个结果是使系统过于繁忙而无法做任何有用的事情，以及占用关键的系统资源。&lt;/p&gt;
&lt;p&gt;你无法完全抵御DoS攻击。它们可以根据攻击者的想象采取尽可能多的不同形式。
任何导致系统响应的东西，任何导致系统分配资源的东西(包括攻击日志)，
任何导致远程站点停止与您通信的东西——所有这些都可以用于DoS攻击。&lt;/p&gt;
&lt;p&gt;这些攻击通常涉及几种典型的模式之一，包括TCP SYN泛洪、ping泛洪、UDP泛洪、
碎片炸弹、缓冲区溢出和ICMP路由重定向炸弹。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tcp-syn"&gt;
&lt;h4&gt;TCP SYN洪水&lt;/h4&gt;
&lt;p&gt;TCP SYN flood攻击会消耗系统资源，直到没有更多传入的TCP连接(参见图2.8)。
该攻击利用建立连接时基本的TCP三路握手协议，配合IP源地址欺骗。&lt;/p&gt;
&lt;p&gt;攻击者欺骗他或她的源地址作为一个私人地址，并发起一个连接到您的一个基于tcp的服务。
攻击者看起来像是试图打开TCP连接的客户机，它向您发送人为生成的SYN消息。
您的机器通过发送一个确认，一个SYN-ACK响应。然而，在这种情况下，
您要回复的地址并不是攻击者的地址。事实上，因为地址是私人的，所以没有人会回应。
被欺骗的主机不会返回RST消息来断开半打开的连接。&lt;/p&gt;
&lt;p&gt;TCP连接建立的最后阶段，即接收到一个ACK响应，永远不会发生。
因此，消耗有限的网络连接资源。在连接尝试超时之前，连接一直处于半打开状态。
攻击者用一个接一个的连接请求淹没你的端口，比TCP超时时间更快地释放资源。
如果这种情况持续下去，所有资源将被使用，并且不能接受更多传入的连接请求。
这不仅适用于正在探测的服务，而且也适用于所有新连接。&lt;/p&gt;
&lt;p&gt;Linux用户可以获得一些帮助。第一个是源地址过滤，如前所述。
这将过滤掉最常用的欺骗源地址，但不能保证欺骗地址属于您可以预期和过滤的类别。&lt;/p&gt;
&lt;p&gt;第二种方法是启用内核的SYN cookie模块，它可以缓解由SYN泛滥引起的资源短缺。
当连接队列开始满时，系统开始用SYN cookie而不是SYN- acks响应SYN请求，
并释放队列槽位。因此，队列永远不会完全填满。cookie有很短的超时时间;
客户端必须在服务主机响应预期的SYN-ACK之前的短时间内响应它。
cookie是一个序列号，它是根据SYN中的原始序列号、源地址、目的地址和端口
以及一个秘密值生成的。如果对cookie的响应与散列算法的结果匹配，服务器就可以很好地确保SYN是有效的。&lt;/p&gt;
&lt;p&gt;根据特定的版本，您可能需要也可能不需要在内核中使用命令echo 1 &amp;gt; /proc/sys/net/ipv4/tcp_syncookies。一些发行版和内核版本要求您使用make config、make menuconfig或make xconfig显式地将该选项配置到内核中，然后重新编译并安装新内核。&lt;/p&gt;
&lt;p&gt;ping洪水&lt;/p&gt;
&lt;p&gt;任何引起计算机响应的消息都可能被用来降低网络连接，因为它会迫使系统将大部分时间用于响应。
ping发送的ICMP echo - request报文是常见的罪魁祸首。一种名为Smurf的攻击及其变体
迫使系统消耗其资源来处理响应。实现这一目标的一种方法是欺骗受害者的源地址，
并向整个网络的主机广播一个echo请求。一条受欺骗的请求消息可能会导致向受害者发送数百或
数千个相应的回复。实现类似结果的另一种方法是在互联网上被破坏的主机上安装木马，
并计时，使它们同时向同一主机发送回送请求。最后，简单的ping泛洪是DoS的另一种方法，
攻击者发送更多的回显请求，并泛洪数据连接，尽管它越来越不常见。典型的ping泛洪如图2.9所示。&lt;/p&gt;
&lt;p&gt;死亡之 ping&lt;/p&gt;
&lt;p&gt;以前的一个漏洞叫做Ping of Death，它涉及发送非常大的Ping包。因此，脆弱的系统可能会崩溃。
Linux不会受到这个漏洞的攻击，当前许多其他UNIX操作系统也不会。如果您的防火墙正在保护较旧的
系统或个人计算机，这些系统可能容易受到攻击。&lt;/p&gt;
&lt;p&gt;Ping of Death漏洞让我们了解了创造性黑客如何使用最简单的协议和消息交互。
并不是所有的攻击都是试图侵入你的电脑。有些仅仅是破坏性的。
在本例中，目标是使机器崩溃。(系统崩溃也可能是一个指示，您需要检查您的系统是否安装了木马程序。
你可能被骗加载了一个木马程序，但程序本身可能需要重新启动系统才能激活。)&lt;/p&gt;
&lt;p&gt;Ping是一个非常有用的基本网络工具。您可能不希望完全禁用ping。在当今的互联网环境中，
保守人士建议禁用传入ping，或者至少严格限制从谁那里接受回显请求。由于ping有参与DoS攻击的历史，
许多站点不再响应来自选定来源以外的任何外部ping请求。与针对应用程序和栈中其他协议的
更普遍和更危险的威胁相比，这似乎是对基于ICMP的DoS相对较小的威胁的过度反应。&lt;/p&gt;
&lt;p&gt;然而，对受害主机来说，放弃ping请求并不是一个解决方案。不管报文的接收方对报文的反应如何，
系统(或网络)在检查和丢弃大量请求的过程中仍然可能会被淹没。&lt;/p&gt;
&lt;p&gt;UDP的洪水&lt;/p&gt;
&lt;p&gt;UDP协议作为DoS工具尤其有用。与TCP不同，UDP是无状态的。不包括流量控制机制。
没有连接状态标志。没有使用数据报序列号。不维护下一个包的信息。
并不是总有一种方法可以根据端口号区分客户机流量和服务器流量。如果没有状态，
就无法区分预期的传入响应和未请求的数据包意外到达。让系统忙于响应传入的UDP探测，
以至于没有带宽留给合法的网络流量，这是相对容易的。&lt;/p&gt;
&lt;p&gt;因为UDP服务很容易受到这些类型的攻击(与面向连接的TCP服务相反)，
许多站点禁用了所有非绝对必要的UDP端口。如前所述，几乎所有常见的Internet服务都是基于TCP的。
我们将在第5章“构建和安装独立防火墙”中构建的防火墙，小心地将UDP流量限制在那些提供必要UDP服务的
远程主机上。&lt;/p&gt;
&lt;p&gt;经典的UDP flood攻击要么涉及两台受害机器，要么以与Smurf ping flood相同的方式工作(参见图2.10)。
一个来自攻击者的UDP响应端口的欺骗数据包，指向主机的UDP收费端口，可以导致网络流量的无限循环。
echo和chargen业务属于网络测试业务。chargen生成一个ASCII字符串。Echo返回发送到端口的数据。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="debian"></category></entry><entry><title>POSTGRESQL 学习</title><link href="https://recozo.github.io/postgresql-xue-xi.html" rel="alternate"></link><published>2020-10-03T20:16:00+08:00</published><updated>2022-05-03T00:33:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-10-03:/postgresql-xue-xi.html</id><summary type="html">&lt;div class="section" id="postgresql-1"&gt;
&lt;h2&gt;安装配置 PostgreSQL&lt;/h2&gt;
&lt;p&gt;安装 postgresql 并登录至 postgres 用户环境&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install postgresql
$ sudo -i -u postgres
$ psql
&lt;/pre&gt;
&lt;p&gt;创建角色以及数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; CREATE ROLE demo_role LOGIN PASSWORD 'demo_password';
&amp;gt;&amp;gt; CREATE DATABASE demo_db WITH owner = demo_role;
&lt;/pre&gt;
&lt;p&gt;默认安 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="postgresql-1"&gt;
&lt;h2&gt;安装配置 PostgreSQL&lt;/h2&gt;
&lt;p&gt;安装 postgresql 并登录至 postgres 用户环境&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install postgresql
$ sudo -i -u postgres
$ psql
&lt;/pre&gt;
&lt;p&gt;创建角色以及数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; CREATE ROLE demo_role LOGIN PASSWORD 'demo_password';
&amp;gt;&amp;gt; CREATE DATABASE demo_db WITH owner = demo_role;
&lt;/pre&gt;
&lt;p&gt;默认安装时，只允许本机访问，可以选择开启远程访问&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vi /etc/postgresql/13/main/postgresql.conf
# 修改 listen_addresses = '*'， 表示在所有接口上监听，默认只在 127.0.0.1 监听

$ vi /etc/postgresql/13/main/pg_hba.conf
# 增加一条如下记录，表示允许以下 IP 范围使用角色密码访问
# host    all             all             10.62.1.0/24            md5
&lt;/pre&gt;
&lt;p&gt;修改后要重新启动 postgresql&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl restart postgresql.service
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="roles"&gt;
&lt;h2&gt;Roles&lt;/h2&gt;
&lt;p&gt;PostgreSQL represents accounts as roles.
Roles that can log in are called login roles.
Roles that contain other roles are called group roles.
Roles that are group and can log in are called group login roles.
However, for easier maintainability and security, DBAs generally don't grant login rights to group roles.
A role can be designated as superuser.
Recent versions of PostgreSQL no longer use the terms users and groups.
For backward compatibility, CREATE USER and CREATE GROUP still work in current version, but shun them and use CREATE ROLE instead.&lt;/p&gt;
&lt;div class="section" id="creating-login-roles"&gt;
&lt;h3&gt;Creating Login Roles&lt;/h3&gt;
&lt;p&gt;Example 2-4. Creating login roles&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE ROLE leo LOGIN PASSWORD 'king' CREATEDB VALID UNTIL 'infinity';
&lt;/pre&gt;
&lt;p&gt;Example 2-5. Creating superuser roles&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE ROLE regina LOGIN PASSWORD 'queen' SUPERUSER VALID UNTIL '2020-1-1 00:00';
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-group-roles"&gt;
&lt;h3&gt;Creating Group Roles&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
CREATE ROLE royalty INHERIT;
GRANT royalty TO leo;
GRANT royalty TO regina;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="inheriting-rights-from-group-roles"&gt;
&lt;h3&gt;Inheriting rights from group roles&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
SET ROLE some_role
SET SESSION AUTHORIZATION some_role
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Only superusers can execute SET SESSION AUTHORIZATION ,
and it allows them to impersonate any user regardless of role membership.&lt;/li&gt;
&lt;li&gt;SET SESSION AUTHORIZATION changes the values of the current_user and session_user variables
to those of the user being impersonated.
SET ROLE changes only the current_user variable.&lt;/li&gt;
&lt;li&gt;Because both the current_user and session_user are changed by SET SESSION AUTHORIZATION ,
subsequent SET role commands are limited to those allowed by the user being impersonated.
After SET ROLE , roles can be set to any role that the original user has rights to impersonate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过编辑 pg_hba.conf 可以修改用户（ROLE）的认证方法，默认使用 peer ，会要求有相应的系统用户，
通过修改为 md5，可以使用密码验证 或修改为 trust， 可以直接登录无须验证。&lt;/p&gt;
&lt;p&gt;参见： &lt;a class="reference external" href="https://www.postgresql.org/docs/current/auth-methods.html"&gt;https://www.postgresql.org/docs/current/auth-methods.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="database-creation"&gt;
&lt;h2&gt;Database Creation&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
CREATE DATABASE mydb;
&lt;/pre&gt;
&lt;p&gt;This creates a copy, owned by the login role that issued the command,
of the template1 default. Any role with CREATEDB rights can create new databases.&lt;/p&gt;
&lt;div class="section" id="template-databases"&gt;
&lt;h3&gt;Template Databases&lt;/h3&gt;
&lt;p&gt;A template database is a database that serves as a model for other databases.
The default PostgreSQL installation comes with two template databases: template0 and template1 .
If you don’t specify a template database to follow when you create a database,
the template1 database is used as the template for the new database.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE DATABASE my_db TEMPLATE my_template_db;
UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'mydb';
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="using-schemas"&gt;
&lt;h3&gt;Using Schemas&lt;/h3&gt;
&lt;p&gt;Schemas organize your database into logical groups.
It’s up to you how to organize your schemas.&lt;/p&gt;
&lt;p&gt;Another common way to organize schemas is by roles.
We can take advantage of the default search path set in postgresql.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
search_path = &amp;quot;$user&amp;quot;, public;
&lt;/pre&gt;
&lt;p&gt;Another practice that we strongly advocate is to create schemas to house extensions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE SCHEMA my_extensions;
ALTER DATABASE mydb SET search_path='&amp;quot;$user&amp;quot;, public, my_extensions';
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="privileges"&gt;
&lt;h2&gt;Privileges&lt;/h2&gt;
&lt;p&gt;Privileges (often called permissions) can be tricky to administer in PostgreSQL
because of the fine granular control at your disposal.
Security can bore down to the object level.
You could assign different privileges to each column of your table, if that ever becomes necessary.&lt;/p&gt;
&lt;div class="section" id="types-of-privileges"&gt;
&lt;h3&gt;Types of Privileges&lt;/h3&gt;
&lt;p&gt;Some of the object-level privileges you find in PostgreSQL are
SELECT , INSERT , UPDATE , ALTER , EXECUTE , TRUNCATE ,
and a qualifier to those called WITH GRANT .
Note that privileges are relevant only with respect to a particular database asset.
For example, TRUNCATE for functions and EXECUTE for tables make no sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;PostgreSQL creates one superuser and one database for you at installation, both named postgres.
Log into your server as postgres .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before creating your first database, create a role that will own the database and can log in,
such as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE ROLE mydb_admin LOGIN PASSWORD 'something';
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the database and set the owner:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE DATABASE mydb WITH owner = mydb_admin;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now log in as the mydb_admin user and start setting up additional schemas and tables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="grant"&gt;
&lt;h3&gt;GRANT&lt;/h3&gt;
&lt;p&gt;The GRANT command assigns privileges to others. The basic usage is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT some_privilege TO some_role;
&lt;/pre&gt;
&lt;p&gt;A few things to keep in mind when it comes to GRANT :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;You need to be the holder of the privilege that you’re granting
and you must have grant privilege yourself. You can’t give away what you don’t have.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Some privileges always remain with the owner of an object and can never be granted away.
These include DROP and ALTER .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The owner of an object already has all privileges.
Granting an owner privilege in what it already owns is unnecessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When granting privileges, you can add WITH GRANT OPTION .
This means that the grantee can grant onwards:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT ALL ON ALL TABLES IN SCHEMA public TO mydb_admin WITH GRANT OPTION;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;To grant all relevant privileges on an object use ALL instead of the specific privilege:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT SELECT, REFERENCES, TRIGGER ON ALL TABLES IN SCHEMA my_schema TO PUBLIC;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The ALL alias can also be used to grant for all objects within a database or schema:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA my_schema TO PUBLIC;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;To grant privileges to all roles, you can use the alias PUBLIC&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT USAGE ON SCHEMA my_schema TO PUBLIC;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some privileges are by default granted to PUBLIC .
These are CONNECT and CREATE TEMP TABLE for databases, EXECUTE for functions, and USAGE for languages.
In many cases you might consider revoking some of defaults for your own safety.
Use the REVOKE command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
REVOKE EXECUTE ON ALL FUNCTIONS IN SCHEMA my_schema FROM PUBLIC;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="default-privileges"&gt;
&lt;h3&gt;Default Privileges&lt;/h3&gt;
&lt;p&gt;PostgreSQL 9.0 introduced default privileges,
which allow users to set privileges on all database assets within a particular schema or database,
as well as in advance of their creation.
Adding or changing default privileges won’t affect current privilege settings.&lt;/p&gt;
&lt;p&gt;Example 2-6. Defining default privileges on a schema:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT USAGE ON SCHEMA my_schema TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA my_schema GRANT SELECT, REFERENCES ON TABLES TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA my_schema GRANT ALL ON TABLES TO mydb_admin WITH GRANT OPTION;
ALTER DEFAULT PRIVILEGES IN SCHEMA my_schema GRANT SELECT, UPDATE ON SEQUENCES TO public;
ALTER DEFAULT PRIVILEGES IN SCHEMA my_schema GRANT ALL ON FUNCTIONS TO mydb_admin WITH GRANT OPTION;
ALTER DEFAULT PRIVILEGES IN SCHEMA my_schema GRANT USAGE ON TYPES TO PUBLIC;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="privilege-idiosyncrasies"&gt;
&lt;h3&gt;Privilege Idiosyncrasies&lt;/h3&gt;
&lt;p&gt;Unlike in other database products,
being the owner of a PostgreSQL database does not give you access to all objects in the database,
but it does grant you privileges to whatever objects you create and allows you to drop the database.&lt;/p&gt;
&lt;p&gt;Another role can create objects that you can’t access in your owned database.
Interestingly, though, you can still drop the whole database.&lt;/p&gt;
&lt;p&gt;People often forget to set GRANT USAGE ON SCHEMA or GRANT ALL ON SCHEMA.
Even if your tables and functions have rights assigned to a role,
these tables and functions will still not be accessible
if the role has no USAGE rights to the schema.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="postgresql"></category><category term="database"></category></entry><entry><title>在 DEBIAN 11 上安装 dotnet core 并启用 Serenity</title><link href="https://recozo.github.io/zai-debian-11-shang-an-zhuang-dotnet-core-bing-qi-yong-serenity.html" rel="alternate"></link><published>2022-05-02T21:24:00+08:00</published><updated>2022-05-02T21:24:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2022-05-02:/zai-debian-11-shang-an-zhuang-dotnet-core-bing-qi-yong-serenity.html</id><summary type="html">&lt;p&gt;本配置在 debian 11 下测试通过，默认环境为全新安装，仅安装 SSH，
创建了一个普通用户 recozo，该用户开启 sudo 功能。&lt;/p&gt;
&lt;p&gt;参见：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnetcore/practice-troubleshoot-linux/introduction"&gt;https://docs.microsoft.com/en-us/troubleshoot …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;本配置在 debian 11 下测试通过，默认环境为全新安装，仅安装 SSH，
创建了一个普通用户 recozo，该用户开启 sudo 功能。&lt;/p&gt;
&lt;p&gt;参见：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnetcore/practice-troubleshoot-linux/introduction"&gt;https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnetcore/practice-troubleshoot-linux/introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="dotnet"&gt;
&lt;h2&gt;一、安装 DOTNET&lt;/h2&gt;
&lt;p&gt;使用以下命令安装 dotnet sdk&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt intalll wget
$ wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
$ sudo dpkg -i packages-microsoft-prod.deb
$ rm packages-microsoft-prod.deb
$ sudo apt update
$ sudo apt install -y apt-transport-https
$ sudo apt install -y dotnet-sdk-6.0
# 由于目前 serenity 还是使用 aspnetcore 5，暂时还要安装这个
$ sudo apt install -y aspnetcore-runtime-5.0
$ dotnet --list-sdks
$ dotnet --list-runtimes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;二、创建测试网站（参照）&lt;/h2&gt;
&lt;p&gt;创建一个 aspnetcore 网站&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ dotnet new globaljson -o MySolution/MyProject
$ dotnet new web -o MySolution/MyProject/
$ dotnet new sln -o MySolution/
$ dotnet sln MySolution add MySolution/MyProject
$ cd MySolution/
# 以下二条语句怎么不能成功执行了，好像成功执行过的
$ dotnet run
$ dotnet run --urls=&amp;quot;http://0.0.0.0:5001&amp;quot;
# 现在要求必须指定项目
$ dotnet run --project MyProject --urls=&amp;quot;http://0.0.0.0:5000;https://0.0.0.0:5001&amp;quot;
&lt;/pre&gt;
&lt;p&gt;生成网站发布代码，一般会将网站代码部署在 /var/www 目录下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ dotnet publish --configuration Release
$ dotnet MyProject/bin/Release/net6.0/publish/MyProject.dll
$ sudo cp -a ~/MySolution/MyProject/bin/Release/net6.0/publish/ /var/www/web02.rcz.cn/
&lt;/pre&gt;
&lt;p&gt;在实际操作中发现一下问题，就是上面第二句 dotnet MyProject/bin/Release/net6.0/publish/MyProject.dll
，如果是 serenity ，由于默认要读取当前目录下的配置文件，但是由于运行时所在目录与工作目录不一致时，导致出错。
怎么解决？？？ TODO...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;三、自动运行网站 ::&lt;/h2&gt;
&lt;p&gt;创建该网站 daemon ，以确保重启服务器或出错后能够自动运行网站&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/systemd/system/web02.rcz.cn.service
$ sudo systemctl enable web02.rcz.cn.service
$ sudo systemctl start web02.rcz.cn.service
$ systemctl status web02.rcz.cn.service
&lt;/pre&gt;
&lt;p&gt;web02.rcz.cn.server 代码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Unit]
Description=web02.rcz.cn is a demo website template

[Service]
WorkingDirectory=/var/www/web02.rcz.cn/
ExecStart=/usr/bin/dotnet /var/www/web02.rcz.cn/MyProject.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=web02.rcz.cn-identifier
User=www-data
Environment=ASPNETCORE_ENVIRONMENT=Development
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
Environment=ASPNETCORE_URLS=http://localhost:5001

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;
&lt;p&gt;请根据实际情况修改，默认 aspnetcore 网站分别使用 5000 和 5001 作为网站的 http 与 https 访问端口，
如果要运行多个网站时，可以通过指定 ASPNETCORE_URLS 指定端口。由于我们使用 nginx 反向代理，
不需要 https 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h2&gt;四、启用 nginx&lt;/h2&gt;
&lt;p&gt;使用以下命令安装 nginx&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install nginx
$ systemctl status nginx
&lt;/pre&gt;
&lt;p&gt;启用网站的反向代理&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/nginx/sites-available/web02.rcz.cn
$ sudo ln -s /etc/nginx/sites-available/web02.rcz.cn /etc/nginx/sites-enabled
$ sudo nginx -T
$ sudo nginx -s reload
&lt;/pre&gt;
&lt;p&gt;注意：创建软链接时，必须使用完整路径； nginx 必须进行重新载入才能生效网站配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="https"&gt;
&lt;h2&gt;五、对网站启用 HTTPS&lt;/h2&gt;
&lt;p&gt;使用以下命令安装 certbot&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install snapd
$ sudo snap install core; sudo snap refresh core
$ sudo snap install --classic certbot
# 以下软链接是否有必要，退出再登录后，发现路径中已经加入了 /snap/bin
$ sudo ln -s /snap/bin/certbot /usr/bin/certbot
&lt;/pre&gt;
&lt;p&gt;使用以下命令获取证书并自动网站配置（需要事先进行域名配置，防火墙上进行公网 IP 与内网服务器 IP 的映射，
简单来说，就要保证能事先通过域名以 HTTP 方式访问网站）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo certbot --nginx
$ cat /etc/nginx/sites-enabled/web02.rcz.cn
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;六、常用故障检测命令&lt;/h2&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
$ sudo journalctl -fu web02.rcz.cn.service
$ sudo ss -tulp
$ sudo vi /var/log/nginx/error.log
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="debian-serenity"&gt;
&lt;h2&gt;七、在 Debian 环境下运行 serenity 网站&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://serenity.is/docs/postgresql"&gt;https://serenity.is/docs/postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、安装并配置 postgresql 数据库，参见 POSTGRESQL 学习。
以下假设数据库为 demo_db ，角色密码分别为 demo_role 和 demo_password；&lt;/p&gt;
&lt;p&gt;2、修改项目文件以启用 postgresql。
在项目中使用 NUGET， Registering Npgsql Provider；
修改项目文件， Open the Startup.cs file under /Initialization/ and
register PostgreSQL DbProviderFactory；
修改数据库连接串， 即在 .Net Core appsettings.json 中，Setting Connection Strings；
修改完成后，测试运行。&lt;/p&gt;
&lt;p&gt;3、在 visual studio 2022 中生成发布代码并上传至网站服务器的 /var/www/demo_serenity.rcz.cn；&lt;/p&gt;
&lt;p&gt;4、参照以上步骤设置网站域名、自动重启、反射代理以及数字证书等。&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="serenity"></category><category term="asp.net core"></category><category term="dotnet core"></category></entry><entry><title>基于 wagtail 创建网站应用</title><link href="https://recozo.github.io/ji-yu-wagtail-chuang-jian-wang-zhan-ying-yong.html" rel="alternate"></link><published>2020-10-03T14:12:00+08:00</published><updated>2022-04-03T14:12:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-10-03:/ji-yu-wagtail-chuang-jian-wang-zhan-ying-yong.html</id><summary type="html">&lt;p&gt;参考链接&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-10"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;系统运行环境配置&lt;/h2&gt;
&lt;p&gt;设置开发与运行环境，默认环境为全新安装，仅安装 SSH 和 基 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;参考链接&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-10"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-scalable-django-app-with-digitalocean-managed-databases-and-spaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;系统运行环境配置&lt;/h2&gt;
&lt;p&gt;设置开发与运行环境，默认环境为全新安装，仅安装 SSH 和 基础工具软件，
创建了一个普通用户 recozo，为该用户开启 sudo 功能。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;以 root 用户安装 sudo&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install sudo
# adduser recozo sudo
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;以 recozo 用户登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装 postgresql数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install postgresql postgresql-client curl nginx
&lt;/pre&gt;
&lt;p&gt;切换至 postgres 用户&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo -i -u postgres
$ psql
&lt;/pre&gt;
&lt;p&gt;通过 psql 创建数据库角色与数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; CREATE ROLE mywagtail_admin LOGIN PASSWORD 'password';
&amp;gt;&amp;gt; CREATE DATABASE mywagtail WITH owner = mywagtail_admin;

退出 postgres 用户，回到 recozo 用户环境
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;安装用于支持 pillow 图片处理的库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install libjpeg-dev zlib1g-dev
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装用于支持PYTHON虚拟环境的库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install python3-venv
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wagtail-1"&gt;
&lt;h2&gt;二、新建一个 wagtail 网站程序&lt;/h2&gt;
&lt;p&gt;初始化网站程序&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir ~/mywagtail &amp;amp;&amp;amp; cd ~/mywagtail

$ python3 -m venv .venv
$ source .venv/bin/activate
$ pip install wheel wagtail wagtail-2fa gunicorn psycopg2-binary

$ wagtail start project .
$ vi project/settings/base.py
&lt;/pre&gt;
&lt;p&gt;使用以下内容更新 base.py 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 修改并使用POSTGRESQL数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mywagtail',
        'USER': 'mywagtail_admin',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# 启用双因子验证
# 用户可安装 microsoft autherticator
# 当用户首次登录后，会弹出二维码扫描，使用microsoft autherticator绑定设备
# 以后每次登录成功后都要到 microsoft autherticator 获取 OTP 并正确输入后才能成功登录
# https://wagtail-2fa.readthedocs.io/en/latest/
INSTALLED_APPS = [
    # ...
    'wagtail_2fa',
    'django_otp',
    'django_otp.plugins.otp_totp',
    # ...
]
MIDDLEWARE = [
    # .. other middleware
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',

    'wagtail_2fa.middleware.VerifyUserMiddleware',

    # 'wagtail.core.middleware.SiteMiddleware',
    # .. other middleware
]
WAGTAIL_2FA_REQUIRED = True
# 启用双因子验证

# 修改并设置中文及时区
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai
&lt;/pre&gt;
&lt;p&gt;** 注意 **&lt;/p&gt;
&lt;p&gt;To avoid possible confusion as to effective scope, in django 4.0 the private internal
utility is_safe_url() is renamed to url_has_allowed_host_and_scheme().&lt;/p&gt;
&lt;p&gt;在 wagtail-2fa 中使用了 is_safe_url，暂时解决方案如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vi .venv/lib/python3.9/site-packages/wagtail_2fa/views.py
from django.utils.http import url_has_allowed_host_and_scheme as is_safe_url
&lt;/pre&gt;
&lt;p&gt;** 注意 **&lt;/p&gt;
&lt;p&gt;执行以下命令分别生成数据库，网站管理员以及启动网站测试&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python manage.py migrate
$ python manage.py createsuperuser
$ python manage.py runserver
&lt;/pre&gt;
&lt;p&gt;记得在正式发布时，必须在生产机上运行 python manage.py collectstatic&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h2&gt;利用 GITHUB 分发现有程序&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;克隆现有程序&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/recozo/mywagtail.git recozo_com
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;还原应用程序运行环境&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd recozo_com
$ python3 -m venv .venv
$ pip install -r requirements.txt
$ vi project/settings/base.py
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;修改 base.py 使用对应的 POSTGRESQL 数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mywagtail',
        'USER': 'mywagtail_admin',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;继续还原参数配置&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vi project/settings/production.py
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;修改 production.py 使用正确的域名以及模板目录名&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ALLOWED_HOSTS = ['recozo.com']
RCZ_TEMPLATE_ACTIVE_DIR = 'recozo_com'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;基于该现有 wagtail 程序创建一个新的网站&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;统一为模板指定模板活动目录的变量（在 project/context_processors.py中设置）&lt;/li&gt;
&lt;li&gt;在 project/settings/dev.py中设置RCZ_TEMPLATE_ACTIVE_DIR
（该目录统一设置在 home 的templates目录下，注意，如果正式发布，请在production.py中进行相同设置）&lt;/li&gt;
&lt;li&gt;版面模板及相关的CSS和JS均保存在home目录下，参见 recozo_com 的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;根据实际选择执行以下命令&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python manage.py migrate
$ python manage.py createsuperuser
$ python manage.py collectstatic
$ python manage.py runserver
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h2&gt;通过 nginx 发布网站&lt;/h2&gt;
&lt;p&gt;创建 systemd socket 文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/systemd/system/gunicorn.recozo_com.socket
&lt;/pre&gt;
&lt;p&gt;将以下内容写入 socket 文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Unit]
Description=gunicorn recozo_com socket

[Socket]
ListenStream=/run/gunicorn.recozo_com.sock

[Install]
WantedBy=sockets.target
&lt;/pre&gt;
&lt;p&gt;创建 systemd 服务文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/systemd/system/gunicorn.recozo_com.service
&lt;/pre&gt;
&lt;p&gt;将以下内容写入 service 文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Unit]
Description=gunicorn daemon
Requires=gunicorn.recozo_com.socket
After=network.target

[Service]
User=recozo
Group=www-data
WorkingDirectory=/home/recozo/recozo_com
ExecStart=/home/recozo/recozo_com/.venv/bin/gunicorn \
                --access-logfile - \
                --workers 3 \
                --bind unix:/run/gunicorn.recozo_com.sock \
                project.wsgi:application

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;
&lt;p&gt;启用 socket 与 service&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl start gunicorn.recozo_com.socket
$ sudo systemctl enable gunicorn.recozo_com.socket
&lt;/pre&gt;
&lt;p&gt;检查 socket 文件与激活&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl status gunicorn.recozo_com.socket
$ file /run/gunicorn.recozo_com.sock
$ sudo journalctl -u gunicorn.recozo_com.socket

$ sudo systemctl status gunicorn.recozo_com.service
$ curl --unix-socket /run/gunicorn.recozo_com.sock 10.62.1.132
$ sudo systemctl status gunicorn.recozo_com.service
$ sudo journalctl -u gunicorn.recozo_com.service
&lt;/pre&gt;
&lt;p&gt;如果修改了/etc/systemd/system/gunicorn.recozo_com.service&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl daemon-reload
$ sudo systemctl restart gunicorn.recozo_com.service
&lt;/pre&gt;
&lt;p&gt;配置 nginx 代理 gunicorn&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/nginx/sites-available/recozo_com
&lt;/pre&gt;
&lt;p&gt;使用以下内容更新站点配置文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
server {
        listen 80;
        server_name jw.luxi.gov.cn or 10.62.1.132;

        # 增加上传文件的最大限制为10M，为防范DOS，默认只有1M
client_max_body_size 10M;

        location = /favicon.ico { access_log off; log_not_found off; }
        location /static/ {
                root /home/recozo/recozo_com;
        }
        location /media/ {
                root /home/recozo/recozo_com;
        }

        location / {
                include proxy_params;
                proxy_pass http://unix:/run/gunicorn.recozo_com.sock;
        }
}
&lt;/pre&gt;
&lt;p&gt;启用 nginx 网站&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo ln -s /etc/nginx/sites-available/recozo_com /etc/nginx/sites-enabled
$ sudo nginx -t
$ sudo systemctl restart nginx
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;分类功能&lt;/p&gt;
&lt;p&gt;参见：&lt;a class="reference external" href="https://posts-by.lb.ee/building-a-configurable-taxonomy-in-wagtail-django-94ca1080fb28"&gt;https://posts-by.lb.ee/building-a-configurable-taxonomy-in-wagtail-django-94ca1080fb28&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码：&lt;a class="reference external" href="https://gist.github.com/lb-/fda43b343cbf24c44c2c74ec69f2eafd#file-final_models-py"&gt;https://gist.github.com/lb-/fda43b343cbf24c44c2c74ec69f2eafd#file-final_models-py&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;翻译功能&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.wagtail.io/en/v2.9/advanced_topics/customisation/admin_templates.html"&gt;https://docs.wagtail.io/en/v2.9/advanced_topics/customisation/admin_templates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前 wagtail 好像只支持对本身提供的管理后台本地化，
即只能对 .venv/lib/python3.7/site-packages/wagtail/admin/locale/zh_Hans/LC_MESSAGES/django.po
这个文件进行本地化，比如 wagtail_2fa 这个模块要进行中文处理，只能将其 PO 文件内容复制到 wagtail 的django.po 文件中去
不知道是不是我还没有找到正确的实现办法&lt;/p&gt;
&lt;p&gt;更新 po 文件后，使用 django-admin compilemessages 生成 mo 文件即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;注意事项&lt;/p&gt;
&lt;p&gt;由于中文翻译，导致 truncatechars 后边未带...，
请自行修改中文 .venv/lib/python3.7/site-packages/wagtail/admin/locale/zh_Hans/LC_MESSAGES/django.po 文件中的
msgctxt &amp;quot;String to return when truncating text&amp;quot;，&lt;/p&gt;
&lt;p&gt;然后执行 django-admin compilemessages 生成 mo 文件即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="wagtail"></category><category term="django"></category><category term="postgresql"></category><category term="git"></category></entry><entry><title>Django 学习</title><link href="https://recozo.github.io/django-xue-xi.html" rel="alternate"></link><published>2022-01-01T00:28:00+08:00</published><updated>2022-01-01T00:28:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2022-01-01:/django-xue-xi.html</id><summary type="html">&lt;div class="section" id="introduction-to-django"&gt;
&lt;h2&gt;1. Introduction to Django&lt;/h2&gt;
&lt;div class="section" id="scaffolding-a-django-project-and-app"&gt;
&lt;h3&gt;Scaffolding a Django Project and App&lt;/h3&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ django-admin.py startproject myprojectname .
$ python manage runserver
$ python manage startapp myappname
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="model-view-template"&gt;
&lt;h3&gt;Model View Template&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Models&lt;/dt&gt;
&lt;dd&gt;Django models define the data for your application and provide an
abstraction layer to SQL database access through an Object
Relational …&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction-to-django"&gt;
&lt;h2&gt;1. Introduction to Django&lt;/h2&gt;
&lt;div class="section" id="scaffolding-a-django-project-and-app"&gt;
&lt;h3&gt;Scaffolding a Django Project and App&lt;/h3&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ django-admin.py startproject myprojectname .
$ python manage runserver
$ python manage startapp myappname
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="model-view-template"&gt;
&lt;h3&gt;Model View Template&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Models&lt;/dt&gt;
&lt;dd&gt;Django models define the data for your application and provide an
abstraction layer to SQL database access through an Object
Relational Mapper (ORM).&lt;/dd&gt;
&lt;dt&gt;Views&lt;/dt&gt;
&lt;dd&gt;A Django view is where most of the logic for your application is
defined. A view is a function that you write that will receive
a request in the form of a Python object (specifically, a Django
HttpRequest object).Your view must return an HttpResponse object
that encapsulates all the information being provided to the client.&lt;/dd&gt;
&lt;dt&gt;Templates&lt;/dt&gt;
&lt;dd&gt;A template is a HyperText Markup Language (HTML) file (usually –
any text file can be a template) that contains special placeholders
that are replaced by variables your application provides.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-http"&gt;
&lt;h3&gt;Introduction to HTTP&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="processing-a-request"&gt;
&lt;h3&gt;Processing a Request&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Match request against URL Routes  -- Django&lt;/li&gt;
&lt;li&gt;Call view method with HttpRequest Object  -- Your Code&lt;/li&gt;
&lt;li&gt;Perform logic inside view method   -- Your Code&lt;/li&gt;
&lt;li&gt;Return HttpResponse object  -- Your Code&lt;/li&gt;
&lt;li&gt;Send response to client  -- Django&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="django-project"&gt;
&lt;h3&gt;Django Project&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;manage.py&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;As the name suggests, this is a script that is used to manage your
Django project. some of the more common ones are listed here:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;runserver&lt;/li&gt;
&lt;li&gt;startapp&lt;/li&gt;
&lt;li&gt;shell&lt;/li&gt;
&lt;li&gt;dbshell&lt;/li&gt;
&lt;li&gt;makemigrations&lt;/li&gt;
&lt;li&gt;migrate&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;The myproject Directory&lt;/dt&gt;
&lt;dd&gt;This is the actual Python package for your project. It contains
settings for the project, some configuration files for your web
server, and the global URL maps.&lt;/dd&gt;
&lt;dt&gt;Django Development Server&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;By default, the server listens on port 8000 on localhost (127.0.0.1).&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
python3 manage.py runserver 8001
python3 manage.py runserver 0.0.0.0:8000
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="django-apps"&gt;
&lt;h3&gt;Django Apps&lt;/h3&gt;
&lt;p&gt;An app directory contains all the models, views, and templates (and more)
that they need to provide application functionality.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 manage.py startapp myapp
&lt;/pre&gt;
&lt;p&gt;Inside the app directory are several files and a folder :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;__init__.py&lt;/li&gt;
&lt;li&gt;admin.py&lt;/li&gt;
&lt;li&gt;apps.py&lt;/li&gt;
&lt;li&gt;models.py&lt;/li&gt;
&lt;li&gt;migrations&lt;/li&gt;
&lt;li&gt;tests.py&lt;/li&gt;
&lt;li&gt;views.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="view-details"&gt;
&lt;h3&gt;View Details&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="url-mapping-detail"&gt;
&lt;h3&gt;URL Mapping Detail&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="get-post-and-querydict-objects"&gt;
&lt;h3&gt;GET, POST, and QueryDict Objects&lt;/h3&gt;
&lt;p&gt;Django automatically parses these parameter strings into QueryDict objects.
The data is then available on the HttpRequest object that is passed to your
view—specifically, in the HttpRequest.GET and HttpRequest.POST attributes,
for URL parameters and body parameters respectively. QueryDict objects are
objects that mostly behave like dictionaries, except that they can contain
multiple values for a key. Code snippets&lt;/p&gt;
&lt;pre class="literal-block"&gt;
qd = QueryDict('k=a&amp;amp;k=b&amp;amp;k=c')
qd[k']
qd.get('k')
qd.getlist('k')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="exploring-django-settings"&gt;
&lt;h3&gt;Exploring Django Settings&lt;/h3&gt;
&lt;p&gt;Django has more settings available that aren't listed in the settings.py file,
and so it will use its built-in defaults in these cases. You can also use the
file to set arbitrary settings that you make up for your application.
Third-party applications might want settings to be added here as well.&lt;/p&gt;
&lt;p&gt;Using Settings in Your Code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.conf import settings # import settings from here instead

if settings.DEBUG:
    do_some_logging()
&lt;/pre&gt;
&lt;p&gt;When importing settings from django.conf, Django mitigates the three issues
we just discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Settings are read from whatever Django settings file has been specified.&lt;/li&gt;
&lt;li&gt;Any default settings values are interpolated.&lt;/li&gt;
&lt;li&gt;Django takes care of parsing any settings defined by a third-party library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="finding-html-templates-in-app-directories"&gt;
&lt;h3&gt;Finding HTML Templates in App Directories&lt;/h3&gt;
&lt;p&gt;Django will look in this (and in other apps' templates directories) because of
APP_DIRS being True in the settings.py file&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rendering-a-template-with-the-render-function"&gt;
&lt;h3&gt;Rendering a Template with the render Function&lt;/h3&gt;
&lt;p&gt;render takes at least two arguments: the first is always the request that was
passed to the view, and the second is the name/relative path of the template
being rendered. We will also call it with a third argument, the render context
that contains all the variables that will be available in the template&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rendering-variables-in-templates"&gt;
&lt;h3&gt;Rendering Variables in Templates&lt;/h3&gt;
&lt;p&gt;To render a variable in a template, simply wrap it with braces: {{ book_name }}.
Django will automatically escape HTML in output so that you can include special
characters (such as &amp;lt; or &amp;gt;) in your variable without worrying about it garbling
your output. If a variable is not passed to a template, Django will simply render
nothing at that location, instead of throwing an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debugging-and-dealing-with-errors"&gt;
&lt;h3&gt;Debugging and Dealing with Errors&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Exceptions&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Exceptions are raised (or thrown in other languages) when an error occurs.
Some common exceptions that you might see:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;IndentationError&lt;/li&gt;
&lt;li&gt;SyntaxError&lt;/li&gt;
&lt;li&gt;NameError&lt;/li&gt;
&lt;li&gt;KeyError&lt;/li&gt;
&lt;li&gt;IndexError&lt;/li&gt;
&lt;li&gt;TypeError&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Debugging&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This chapter was a quick introduction to Django. You first got up to speed on the
HTTP protocol and the structure of HTTP requests and responses. We then saw how
Django uses the MVT paradigm, and then how it parses a URL, generates an HTTP request,
and sends it to a view to get an HTTP response. We scaffolded the Bookr project
and then created the reviews app for it. We then built two example views to illustrate
how to get data from a request and use it when rendering templates. You should have
experimented to see how Django escapes output in HTML when rendering a template.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="model-and-migrations"&gt;
&lt;h2&gt;2. Model and Migrations&lt;/h2&gt;
&lt;div class="section" id="django-orm"&gt;
&lt;h3&gt;Django ORM&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="database-configuration-and-creating-django-applications"&gt;
&lt;h3&gt;Database Configuration and Creating Django Applications&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="django-apps-1"&gt;
&lt;h3&gt;Django Apps&lt;/h3&gt;
&lt;p&gt;A Django project can have multiple apps that often act as discrete entities.
That's why, whenever required, an app can be plugged into a different Django project as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-migration"&gt;
&lt;h3&gt;Django Migration&lt;/h3&gt;
&lt;p&gt;the transformation of Python code into database structures is known as migration.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py migrate
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-django-models-and-migrations"&gt;
&lt;h3&gt;Creating Django Models and Migrations&lt;/h3&gt;
&lt;p&gt;A Django model is essentially a Python class that holds the blueprint
for creating a table in a database. The models.py file can have many such models,
and each model transforms into a database table. The attributes of the class form
the fields and relationships of the database table as per the model definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="field-types"&gt;
&lt;h3&gt;Field Types&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="field-options"&gt;
&lt;h3&gt;Field Options&lt;/h3&gt;
&lt;p&gt;Django has many more field types and field options that can be explored from the extensive
official Django documentation. Execute the following command in the shell or terminal to
migrate the Django models into the database&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py makemigrations appname
&lt;/pre&gt;
&lt;p&gt;The makemigrations &amp;lt;appname&amp;gt; command creates the migration scripts for the given app;
When we run makemigrations without the app name, the migration scripts will be created
for all the apps in the project. The following command, when run in the shell or terminal,
will show the status of model migrations throughout the project&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py showmigrations
&lt;/pre&gt;
&lt;p&gt;Next, let's understand how Django transforms a model into an actual database table&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py sqlmigrate appname migrationscript
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="primary-keys"&gt;
&lt;h3&gt;Primary Keys&lt;/h3&gt;
&lt;p&gt;Since the migration script has already been created by executing makemigrations,
let's now migrate the newly created model in the app by executing the following command&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py migrate app
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="relationships"&gt;
&lt;h3&gt;Relationships&lt;/h3&gt;
&lt;p&gt;Many to One&lt;/p&gt;
&lt;pre class="literal-block"&gt;
publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
&lt;/pre&gt;
&lt;p&gt;Many to Many&lt;/p&gt;
&lt;pre class="literal-block"&gt;
contributors = models.ManyToManyField('Contributor', through='BookContributor')
&lt;/pre&gt;
&lt;p&gt;through: This is a special field option for many-to-many relationships. When we
have a many-to-many relationship across two tables, if we want to store some extra
information about the relationship, then we can use this to establish the relationship
via an intermediary table. When the through field option is not provided while
establishing a many-to-many relationship, Django automatically creates an intermediary
table to manage the relationship.&lt;/p&gt;
&lt;p&gt;One-to-One Relationships&lt;/p&gt;
&lt;pre class="literal-block"&gt;
person = models.OneToOneField(Person, on_delete=models.CASCADE)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="model-methods"&gt;
&lt;h3&gt;Model Methods&lt;/h3&gt;
&lt;p&gt;In Django, we can write methods inside a model class. These are called model methods and
they can be custom methods or special methods that override the default methods of Django models.
One such method is __str__(). This method returns the string representation of the Model instances
and can be especially useful while using the Django shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-s-database-crud-operations"&gt;
&lt;h3&gt;Django's Database CRUD Operations&lt;/h3&gt;
&lt;p&gt;To execute the CRUD operations, we will enter Django's command-line shell
by executing the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py shell
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Exercise 2.02: Creating an Entry in the Bookr Database&lt;/dt&gt;
&lt;dd&gt;In this exercise, you created an entry in the database by creating an instance of the model object
and used the save() method to write the model object into the database. the changes(update) to the
class instance are not saved until the save() method is called.&lt;/dd&gt;
&lt;dt&gt;Exercise 2.03: Using the create() Method to Create an Entry&lt;/dt&gt;
&lt;dd&gt;Invoke the create() method to create an object in the database in a single step.
Ensure that you pass all the required parameters&lt;/dd&gt;
&lt;dt&gt;Exercise 2.04: Creating Records for a Many-to-One Relationship&lt;/dt&gt;
&lt;dd&gt;In this exercise, we learned that while creating a database record, an object can be assigned to
a field if it is a foreign key.&lt;/dd&gt;
&lt;dt&gt;Exercise 2.05: Creating Records with Many-to-Many Relationships&lt;/dt&gt;
&lt;dd&gt;use the relationship to create the objects, we can use through_default to pass
in a dictionary with the parameters defining the required fields.&lt;/dd&gt;
&lt;dt&gt;Exercise 2.07: Using the get() Method to Retrieve an Object&lt;/dt&gt;
&lt;dd&gt;In this exercise, we learned how to fetch a single object using the get() method.
There are several disadvantages to using this method, though. It is important to
note that the get() method can only fetch one object. If there is another object
carrying the same value as the field mentioned, then we can expect a 'returned
more than one' error message. We can also get a 'matching query does not exist'
error message when there are no objects returned from the get() query. The get()
method can be used with any of the object's fields to retrieve a record.&lt;/dd&gt;
&lt;dt&gt;Exercise 2.08: Using the all() Method to Retrieve a Set of Objects&lt;/dt&gt;
&lt;dd&gt;In this exercise, we learned how to retrieve all the objects using the all() method
and we also learned how to use the retrieved set of objects as a list.&lt;/dd&gt;
&lt;dt&gt;Exercise 2.09: Using the filter() Method to Retrieve Objects&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;In this exercise, we saw the use of filters to retrieve a set of a few objects
filtered by a certain condition.  Now, let's suppose we want to filter and query
a set of objects using the object's fields by providing certain conditions. In such
a case, we can use what is called a double-underscore lookup( __gt, __gte,  __lt, __lte,
__contains, __icontains, __startswith, etc).&lt;/p&gt;
&lt;p&gt;we can use the exclude() method to exclude a certain condition and fetch all the required objects.&lt;/p&gt;
&lt;p&gt;We can retrieve a list of objects while ordering by a specified field, using the order_by() method.
We can also use a prefix with the negative sign for the field parameter to order results
in descending order.&lt;/p&gt;
&lt;p class="last"&gt;Yet another useful method offered by Django is values(). It helps us get a query set of
dictionaries instead of objects.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Now let's study how to perform queries across relationships. There are several ways
to go about this, such as Querying Using Foreign Keys, Querying Using Model Name
(written in lowercase) , Querying Across Foreign Key Relationships Using the Object Instance.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Exercise 2.10: Querying Across a Many-to-Many Relationship Using Field Lookup&lt;/dt&gt;
&lt;dd&gt;In this exercise, we learned how to perform queries across many-to-many relationships
using field lookup.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Exercise 2.11: A Many-to-Many Query Using Objects&lt;/p&gt;
&lt;p&gt;Exercise 2.12: A Many-to-Many Query Using the set() Method&lt;/p&gt;
&lt;p&gt;Exercise 2.13: Using the update() Method&lt;/p&gt;
&lt;p&gt;Exercise 2.14: Using the delete() Method&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-1"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;we learned about Django models, migrations, and how they help propagate the changes
to the Django models in the database.&lt;/p&gt;
&lt;p&gt;We shored up our knowledge of databases by learning about database relationships,
and their key types, in relational databases.  We also worked with the Django shell,
where we used Python code to perform the same CRUD queries we performed earlier using SQL.
Later, we learned how to retrieve our data in a more refined manner using pattern matching
and field lookups.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url-mapping-views-and-templates"&gt;
&lt;h2&gt;3. URL Mapping, Views, and Templates&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-django-admin"&gt;
&lt;h2&gt;4. Introduction to Django Admin&lt;/h2&gt;
&lt;div class="section" id="creating-a-superuser-account"&gt;
&lt;h3&gt;Creating a Superuser Account&lt;/h3&gt;
&lt;p&gt;Enter the following command to create a superuser:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python manage.py createsuperuser
&lt;/pre&gt;
&lt;p&gt;Visit the admin app at &lt;a class="reference external" href="http://127.0.0.1:8000/admin"&gt;http://127.0.0.1:8000/admin&lt;/a&gt; and log in with the superuser account
that you have created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crud-operations-using-the-django-admin-app"&gt;
&lt;h3&gt;CRUD Operations Using the Django Admin App&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="users-and-groups"&gt;
&lt;h3&gt;Users and Groups&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-2"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this chapter, we saw how to create superusers through the Django command line
and how to use them to access the admin app. After a brief tour of the admin app's
basic functionality, we examined how to register our models with it to produce a
CRUD interface for our data.&lt;/p&gt;
&lt;p&gt;Then we learned how to refine this interface by modifying site-wide features. We
altered how the admin app presents model data to the user by registering custom
model admin classes with the admin site. This allowed us to make fine-grained
changes to the representation of our models' interfaces. These modifications
included customizing change list pages by adding additional columns, filters,
date hierarchies, and search bars. We also modified the layout of the model admin pages
by grouping and excluding fields.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="serving-static-files"&gt;
&lt;h2&gt;5. Serving Static Files&lt;/h2&gt;
&lt;p&gt;Django provides tools for serving static assets with its development server
during development. When your application goes to production, it can also
collect all your assets and copy them to a folder for a dedicated web server
to host. This allows you to keep your static files segregated in a meaningful way
during development and automatically bundle them for deployment.&lt;/p&gt;
&lt;p&gt;This functionality is provided by Django's built-in staticfiles app. It adds
several useful features for working with and serving static files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The static template tag to automatically build the static URL for an asset and
include it in your HTML.&lt;/li&gt;
&lt;li&gt;A view (called static) that serves static files in development.&lt;/li&gt;
&lt;li&gt;Static file finders to customize where assets are found on your filesystem.&lt;/li&gt;
&lt;li&gt;The collectstatic management command, which finds all static files and moves
them into a single directory for deployment.&lt;/li&gt;
&lt;li&gt;The findstatic management command, which shows which static file on disk is
loaded for a particular request. This also helps to debug if a particular file
is not being loaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="forms"&gt;
&lt;h2&gt;6. Forms&lt;/h2&gt;
&lt;div class="section" id="what-is-a-form"&gt;
&lt;h3&gt;What is a form?&lt;/h3&gt;
&lt;p&gt;A form is made up of inputs that define key-value pairs of data to submit to the server.
Each input in the form has a name, and this is how its data is identified on the server-side
(in a Django view). There can be multiple inputs with the same name, whose data is available
in a list containing all the posted values with this name.&lt;/p&gt;
&lt;p&gt;FORM SECURITY WITH CROSS-SITE REQUEST FORGERY PROTECTION&lt;/p&gt;
&lt;p&gt;The CSRF token must be added into the HTML for every form being sent and is done with
the {% csrf_token %} template tag. The CSRF token is unique to every visitor on the site
and periodically changes.&lt;/p&gt;
&lt;p&gt;ACCESSING DATA IN THE VIEW&lt;/p&gt;
&lt;p&gt;These are request.GET , which contains parameters passed in the URL, and request.POST ,
which contains parameters in the HTTP request body.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All values are sent as text, even number and date inputs.&lt;/li&gt;
&lt;li&gt;For the select inputs, the selected value attributes of the selected options are sent,
not the text content of the option tag.&lt;/li&gt;
&lt;li&gt;If you select multiple options for books_you_own , then you will see multiple values
in the request. This is why we use the getlist method since multiple values are sent
for the same input name.&lt;/li&gt;
&lt;li&gt;If the checkbox was checked, you will have a checkbox_on input in the debug output.
If it was not checked, then the key will not exist at all (that is, there is no key,
instead of having the key existing with an empty string or None value).&lt;/li&gt;
&lt;li&gt;We have a value for the name submit_input , which is the text Submit Input . You submitted
the form by clicking the Submit Input button, so we receive its value. Notice that no value
is set for the button_element input since that button was not clicked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CHOOSING BETWEEN GET AND POST&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The most important is deciding whether or not the request should be idempotent.&lt;/li&gt;
&lt;li&gt;Another point to consider is that Django only applies CSRF projection to POST requests.&lt;/li&gt;
&lt;li&gt;If sending form data with a GET request, the form parameters will be visible in the URL.&lt;/li&gt;
&lt;li&gt;the maximum length of a URL allowed by a browser can be short compared to the size of
a POST body – sometimes only around 2,000 characters (or about 2 KB) compared to
many megabytes or gigabytes that a POST body can be&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WHY USE GET WHEN WE CAN PUT PARAMETERS IN THE URL?&lt;/p&gt;
&lt;p&gt;THE DJANGO FORMS LIBRARY&lt;/p&gt;
&lt;p&gt;The Django Forms library allows you to quickly define a form using a Python class.
This is done by creating a subclass of the base Django Form class. You can then use
an instance of this class to render the form in your template and validate the input
data.&lt;/p&gt;
&lt;p&gt;DEFINING A FORM&lt;/p&gt;
&lt;p&gt;You define a class that inherits from the django.forms.Form class. The class has
attributes, which are instances of different django.forms.Field subclasses.&lt;/p&gt;
&lt;p&gt;When rendered, the attribute name in the class corresponds to its input name in HTML.
To give you a quick idea of what fields there are, some examples are CharField ,
IntegerField , BooleanField , ChoiceField , and DateField . Each field
generally corresponds to one input when rendered in HTML, but there's not always
a one-to-one mapping between a form field class and an input type. Form fields are
more coupled to the type of data they collect rather than how they are displayed.&lt;/p&gt;
&lt;p&gt;To illustrate this, consider a text input and a password input. They both accept
some typed-in text data, but the main difference between them is that the text
is visibly displayed in a text input, whereas with a password input the text is
obscured. In a Django form, both of these fields are represented using CharField .
The difference in how they are displayed is set by changing the widget the
field is using.&lt;/p&gt;
&lt;p&gt;Django defines a number of Widget classes that define how a Field should be
rendered as HTML. They inherit from django.forms.widgets.Widget . A
widget can be passed to the Field constructor to change how it is rendered.&lt;/p&gt;
&lt;p&gt;RENDERING A FORM IN A TEMPLATE&lt;/p&gt;
&lt;p&gt;Django does not add the &amp;lt;form&amp;gt; element or submit button(s) for you when
rendering the template; you should add these around where your form is placed in
the template. The form can be rendered like any other variable.&lt;/p&gt;
&lt;p&gt;VALIDATING FORMS AND RETRIEVING PYTHON VALUES&lt;/p&gt;
&lt;p&gt;We will now look at the other part of what makes Django forms useful:
their ability to automatically validate the form and then retrieve native Python objects
and values from them.&lt;/p&gt;
&lt;p&gt;In Django, a form can either be unbound or bound. These terms describe whether or
not the form has had the submitted POST data sent to it for validation.A form is bound
if it is called with some data to be used for validation, such as the POST data.
A bound form allows us to start using built-in validation-related tools:
first, the is_valid method to check the form's validity, then the cleaned_data attribute
on the form, which contains the values converted from strings to Python objects.&lt;/p&gt;
&lt;p&gt;The cleaned_data attribute is only available after the form has been cleaned,
which means the process of &amp;quot;cleaning up&amp;quot; the data and converting it from strings to
Python objects. The cleaning process runs during the is_valid call. You will get
AttributeError raised if you try to access cleaned_data before calling is_valid .&lt;/p&gt;
&lt;p&gt;note that unlike when we iterated over all of the POST data, cleaned_data only
contains form fields. The other data (such as the CSRF token and the submit button
that was clicked) is present in the POST QueryDict but is not included as
it does not include form fields.&lt;/p&gt;
&lt;p&gt;BUILD-IN FIELD VALIDATION&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;required&lt;/li&gt;
&lt;li&gt;max_length&lt;/li&gt;
&lt;li&gt;min_length&lt;/li&gt;
&lt;li&gt;max_value&lt;/li&gt;
&lt;li&gt;min_value&lt;/li&gt;
&lt;li&gt;max_digits&lt;/li&gt;
&lt;li&gt;decimal_places&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-3"&gt;
&lt;h3&gt;SUMMARY&lt;/h3&gt;
&lt;p&gt;This chapter was an introduction to forms in Django. We introduced some HTML
inputs for entering data onto a web page. We talked about how data is submitted
to a web application and when to use GET and POST requests. We then looked at
how Django's form classes can make generating the form HTML simpler, as well as
allowing the automatic building of forms using models.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-form-validation-and-model-forms"&gt;
&lt;h2&gt;7. ADVANCED FORM VALIDATION AND MODEL FORMS&lt;/h2&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category></entry><entry><title>用户登录日志文件</title><link href="https://recozo.github.io/login-log.html" rel="alternate"></link><published>2021-11-01T10:43:00+08:00</published><updated>2021-11-01T10:43:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2021-11-01:/login-log.html</id><summary type="html">&lt;p class="first last"&gt;用户登录日志文件及管理&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="last-var-log-wtmp"&gt;
&lt;h2&gt;命令 last 以及 /var/log/wtmp&lt;/h2&gt;
&lt;p&gt;/var/log/wtmp 是一个二进制文件，不能用 vi 直接查看，可能使用 last 或 who 进行查看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# last
# who /var/log/wtmp
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="var-log-secure"&gt;
&lt;h2&gt;找不到 /var/log/secure 文件&lt;/h2&gt;
&lt;p&gt;原来服务器的ssh登录等操作日志都是/var/log/secure，但 linux 的新发行版已经不再使用，改为使用rsyslog。
过程：先检查了一下ssh服务是否正常，vim /etc/ssh/sshd_config，检查到其中:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
LogLevel INFO
SyslogFacility AUTHPRIV
&lt;/pre&gt;
&lt;p&gt;没有问题。
然后查看rsyslog的配置文件 /etc/rsyslog.d/50-default.conf（我的电脑里是这个）。发现登录的配置为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auth,authpriv.*                 /var/log/auth.log
&lt;/pre&gt;
&lt;p&gt;说明系统登录文件是/var/log/auth.log，基于这个文件来写脚本即可。&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="wtmp"></category><category term="secure"></category><category term="rsyslog"></category></entry><entry><title>Install FreeRadius On Debian 10</title><link href="https://recozo.github.io/install-freeradius-on-debian.html" rel="alternate"></link><published>2020-11-21T10:12:00+08:00</published><updated>2020-11-21T10:43:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-11-21:/install-freeradius-on-debian.html</id><summary type="html">&lt;p class="first last"&gt;Getting setup freeradius with postgreSQL and support client's device limit&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本文假定系统为全新安装的 DEBIAN 10，正常安装DEBIAN，开启SSH，SUDO功能。
通过安装 FreeRadius 和 PostgreSQL，支持常规的安装。
本安装教程最主要的功能在于支持 H3C 的 802.1x，并且限制用户允许登录访问的设备数量。
TODO: 对客户端启用证书的功能待下次测试并完善&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;一、安装&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
# apt install freeradius freeradius-postgresql postgresql postgresql-client
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="postgresql"&gt;
&lt;h2&gt;二、配置 PostgreSQL&lt;/h2&gt;
&lt;p&gt;参考链接：
&lt;a class="reference external" href="https://wiki.freeradius.org/guide/SQL-HOWTO-for-freeradius-3.x-on-Debian-Ubuntu"&gt;https://wiki.freeradius.org/guide/SQL-HOWTO-for-freeradius-3.x-on-Debian-Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;切换至 postgres 用户，执行 psql&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo -i -u postgres
$ psql
&lt;/pre&gt;
&lt;p&gt;通过 psql 创建数据库角色与数据库&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; CREATE ROLE radius LOGIN PASSWORD 'radpass';
&amp;gt;&amp;gt; CREATE DATABASE radius WITH owner = radius;
&lt;/pre&gt;
&lt;p&gt;退出 postgres 用户，回到 recozo 用户环境&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cd /etc/freeradius/3.0/mods-config/sql/main/postgresql
# psql -h localhost -U radius radius &amp;lt; schema.sql
# psql -h localhost -U radius radius &amp;lt; setup.sql      -- 如果执行了 CREATE ROLE 可以不执行
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="freeradius-3-sql"&gt;
&lt;h2&gt;三、配置 FreeRadius 3 启用 sql&lt;/h2&gt;
&lt;p&gt;参考链接： &lt;a class="reference external" href="https://networkradius.com/doc/3.0.10/raddb/mods-available/eap/peap.html"&gt;https://networkradius.com/doc/3.0.10/raddb/mods-available/eap/peap.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/freeradius/3.0/sites-available/default
--------------------EDIT--------------------
    uncomment sql in authorize, accounting, session, post-auth section
--------------------------------------------

# vi /etc/freeradius/3.0/sites-available/inner-tunnel
--------------------EDIT--------------------
    uncomment sql in authorize, session, post-auth section
--------------------------------------------

# vi /etc/freeradius/3.0/mods-available/sql
--------------------EDIT--------------------
sql {
    driver = &amp;quot;rlm_sql_postgresql&amp;quot;
    dialect = &amp;quot;postgresql&amp;quot;

    # Connection info:
    server = &amp;quot;localhost&amp;quot;
    port = 5432
    login = &amp;quot;radius&amp;quot;
    password = &amp;quot;setup.sql中设置的口令&amp;quot;

    # Database table configuration for everything except Oracle

    radius_db = &amp;quot;radius&amp;quot;

    # Set to ‘yes’ to read radius clients from the database (‘nas’ table)
    # Clients will ONLY be read on server startup.
    read_clients = yes

    # Table to keep radius client info
    client_table = &amp;quot;nas&amp;quot;
--------------------------------------------

# cd /etc/freeradius/3.0/mods-enabled
# ln -s ../mods-available/sql sql
# chown -h freerad:freerad /etc/freeradius/3.0/mods-enabled/sql
# cd /etc/freeradius/3.0/mods-config/sql/main/postgresql

# vi rczmacsetup.sql
--------------------ADD---------------------
/*
* Table structure for table 'rczmaclimit'
*/
CREATE TABLE rczmaclimit (
        UserName                text PRIMARY KEY,
        MacLimit                integer NOT NULL DEFAULT 1,  -- 0 Unlimited
        Remark                  text NOT NULL DEFAULT ''
);
GRANT SELECT on rczmaclimit TO radius;

/*
* Table structure for table 'rczmaccheck'
*/
CREATE TABLE rczmaccheck (
        id                      serial PRIMARY KEY,
        UserName                text NOT NULL,
        CallingStationId        text NOT NULL,
        AuthDate                timestamp with time zone NOT NULL default now()
);
create index rczmaccheck_UserName on rczmaccheck (UserName,CallingStationId);
GRANT SELECT, INSERT, UPDATE on rczmaccheck TO radius;
GRANT USAGE, SELECT ON SEQUENCE rczmaccheck_id_seq TO radius;


/*
* Stored Procedure for authorize_check_query
*/
CREATE OR REPLACE FUNCTION rczmac_authorize_check(rczuserName TEXT, rczcallingStationId TEXT)
RETURNS TABLE (id integer, UserName text, Attribute text, Value text, Op varchar(2))
LANGUAGE plpgsql
AS $$
DECLARE
    isOk        boolean DEFAULT false;
    tmpMacLimit    integer;
    tmpMacTotal    integer;
BEGIN
    IF EXISTS(
        SELECT *
        FROM rczmaccheck
        WHERE rczmaccheck.UserName = rczmac_authorize_check.rczuserName
        AND rczmaccheck.CallingStationId = rczmac_authorize_check.rczcallingStationId
        )
    THEN
        RAISE LOG '用户: % MAC: % ，MAC已登记', rczmac_authorize_check.rczuserName, rczmac_authorize_check.rczcallingStationId;
        isOk = true;
    ELSE
        SELECT MacLimit INTO tmpMacLimit
        FROM rczmaclimit
        WHERE rczmaclimit.UserName = rczmac_authorize_check.rczuserName;

        IF NOT FOUND THEN
            RAISE LOG '用户: % MAC: % ，MAC上限无记录', rczmac_authorize_check.rczuserName, rczmac_authorize_check.rczcallingStationId;
            tmpMacLimit = 1;
        END IF;

        IF tmpMacLimit = 0 THEN
            RAISE LOG '用户: % MAC: % ，MAC上限为0', rczmac_authorize_check.rczuserName, rczmac_authorize_check.rczcallingStationId;
            isOk = true;
        ELSE
            SELECT COUNT(*) INTO tmpMacTotal
            FROM rczmaccheck
            WHERE rczmaccheck.UserName = rczmac_authorize_check.rczuserName;

            IF tmpMacLimit &amp;gt; tmpMacTotal THEN
                RAISE LOG '用户: % MAC: % ，MAC未登记且未达到上限', rczmac_authorize_check.rczuserName, rczmac_authorize_check.rczcallingStationId;
                isOk = true;
            ELSE
                RAISE LOG '用户: % MAC: % ，MAC达到上限禁止登录', rczmac_authorize_check.rczuserName, rczmac_authorize_check.rczcallingStationId;
                isOk = false;
            END IF;
        END IF;
    END IF;

    RAISE LOG '用户: % 的MAC限制检查结果为： %', rczmac_authorize_check.rczuserName, isOk;

    RETURN QUERY
    -- 如果 isOk 不通过，不返回用户检查项
    SELECT radcheck.id, radcheck.UserName, radcheck.Attribute, radcheck.Value, radcheck.Op
    FROM radcheck
    WHERE radcheck.UserName = rczmac_authorize_check.rczuserName AND isOk
    ORDER BY id;
END;
$$;

/*
* Stored Procedure for post-auth-query
*/
CREATE OR REPLACE PROCEDURE rczmac_post_auth(rczuserName TEXT, rczPass TEXT, rczReply TEXT, rczcallingStationId TEXT)
LANGUAGE plpgsql
AS $$
DECLARE
    tmpAuthDate     timestamp DEFAULT now();
BEGIN
    INSERT INTO radpostauth(username, pass, reply, CallingStationId, authdate)
    VALUES (rczuserName, rczPass, rczReply, rczcallingStationId, tmpAuthDate);

    IF rczReply = 'Access-Accept' THEN
        IF EXISTS(
            SELECT *
            FROM rczmaccheck
            WHERE rczmaccheck.UserName = rczmac_post_auth.rczuserName
            AND rczmaccheck.CallingStationId = rczmac_post_auth.rczcallingStationId
            )
        THEN
            RAISE LOG '用户: % MAC: % ，MAC已存在', rczmac_post_auth.rczuserName, rczmac_post_auth.rczcallingStationId;
        ELSE
            RAISE LOG '用户: % MAC: % ，MAC已新增', rczmac_post_auth.rczuserName, rczmac_post_auth.rczcallingStationId;

            INSERT INTO rczmaccheck(UserName, CallingStationId, AuthDate)
            VALUES (rczuserName, rczcallingStationId, tmpAuthDate);
        END IF;
    END IF;
END;
$$;
--------------------------------------------

# psql -h localhost -U radius radius &amp;lt; rczmacsetup.sql

# vi /etc/freeradius/3.0/mods-config/sql/main/postgresql/queries.conf
--------------------EDIT--------------------
#  Authorization Queries
authorize_check_query = &amp;quot;\
    SELECT * FROM rczmac_authorize_check( \
        '%{User-Name}', \
        '%{Calling-Station-Id}')&amp;quot;

# postauth_query                - Insert some info after authentication
post-auth {
    query = &amp;quot;CALL rczmac_post_auth( \
                '%{User-Name}', \
                '%{%{User-Password}:-Chap-Password}', \
                '%{reply:Packet-Type}', \
                '%{Calling-Station-Id}')&amp;quot;
--------------------------------------------

# vi /etc/freeradius/3.0/sites-available/inner-tunnel
--------------------ADD---------------------
#
#  Look in an SQL database.  The schema of the database
#  is meant to mirror the &amp;quot;users&amp;quot; file.
#
#  See &amp;quot;Authorization Queries&amp;quot; in sql.conf
update request {
        &amp;amp;Calling-Station-Id := outer.request:Calling-Station-Id
}
sql
--------------------------------------------

# systemctl enable freeradius
# systemctl restart freeradius
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="sql"&gt;
&lt;h2&gt;四、验证SQL是否安装正确（可选）&lt;/h2&gt;
&lt;p&gt;开二个终端，分别运行 FreeRadius 和 测试&lt;/p&gt;
&lt;p&gt;终端一&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# systemctl stop freeradius
# freeradius -X
&lt;/pre&gt;
&lt;p&gt;终端二&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# psql -h localhost -U postgres radius
radius=# insert into nas (nasname, shortname, secret, description) values ('xxx.xxx.xxx.xxx', 'Short Name', 'secure secret', 'description');        -- 加入要允许访问的NAS设备信息
radius=# insert into radcheck (username,attribute,op,value) values('username', 'Cleartext-Password', ':=', 'password');     -- 加入要允许访问的用户信息
radius=# \q
# radtest username password localhost 0 testing123
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="eapol-test-eap"&gt;
&lt;h2&gt;五、生成 eapol_test 工具并验证 eap （可选）&lt;/h2&gt;
&lt;p&gt;开二个终端，分别运行 FreeRadius 和 测试&lt;/p&gt;
&lt;p&gt;终端一&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# systemctl stop freeradius
# freeradius -X
&lt;/pre&gt;
&lt;p&gt;终端二首先生成 eapol_test&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install pkg-config
$ sudo apt install build-essential
$ sudo apt install libssl-dev
$ sudo apt install libnl-genl-3-dev
$ sudo apt install libdbus-1-dev
$ wget https://w1.fi/releases/wpa_supplicant-2.9.tar.gz
$ tar -zxf wpa_supplicant-2.9.tar.gz
$ cd wpa_supplicant-2.9/wpa_supplicant/
$ cp defconfig .config
$ vi .config
-------------------EDIT---------------------
    CONFIG_EAPOL_TEST=y
--------------------------------------------
$ make eapol_test
/* 在全新安装的 Debian 11 中编译出错，原来在 Debian 10 下没有出错 */
/* https://patchwork.ozlabs.org/project/hostap/patch/20191018020419.28686-2-masashi.honma&amp;#64;gmail.com/ */
/* 2022-01-05 */
$ mkdir ~/bin
$ cp eapol_test ~/bin
&lt;/pre&gt;
&lt;p&gt;继续在终端二测试 eap 功能&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/bin
$ vi eap-ttls-pap.conf
-------------------ADD----------------------
network={
    key_mgmt=WPA-EAP
    eap=TTLS
    identity=&amp;quot;username&amp;quot;
    anonymous_identity=&amp;quot;anonymous&amp;quot;
    password=&amp;quot;password&amp;quot;
    phase2=&amp;quot;auth=PAP&amp;quot;
}
--------------------------------------------
$ ./eapol_test -c eap-ttls-pap.conf -s testing123
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="eap"&gt;
&lt;h2&gt;六、生成 eap 证书（可选，但是强烈建议）&lt;/h2&gt;
&lt;p&gt;参考链接： &lt;a class="reference external" href="https://networkradius.com/doc/FreeRADIUS-Implementation-Ch6.pdf"&gt;https://networkradius.com/doc/FreeRADIUS-Implementation-Ch6.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考链接： &lt;a class="reference external" href="http://deployingradius.com/documents/configuration/certificates.html"&gt;http://deployingradius.com/documents/configuration/certificates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般来说，802.1X 下建议使用自己的CA，生成自签名证书并将根证书安装在用户终端上。
如果用户终端不安装根证书或使用第三方证书的话，存在以下安全隐患：
1、不安装根证书时，存在伪造服务器的可能（创建一个同名SSID的无线，使用伪造的radius服务器），导致用户名与密码泄露；
2、如果启用 EAP-TLS 并使用第三方根证书的话，此时只要是该机构签发的用户证书均有效，导致用户证书不受控。
一般情况下这不是我们想要的结果；因此，如果要使用其它CA的证书，请仔细考虑清楚。&lt;/p&gt;
&lt;p&gt;注意：debian 下的 freeradius 会自动对 EAP 使用 ssl-cert 所生成的 ssl-cert-snakeoil 证书。
该证书是基于debian的自签名证书，主要用于方便需要创建SSL证书的软件包安装，
如果 snakeoil 证书过期，可以使用以下命令重新生成 sudo make-ssl-cert generate-default-snakeoil --force-overwrite ，
也就是不用进行证书生成操作，也可以保证 freeradius 支持 EAP。
不过在生产环境下不应该使用该证书，而应根据实际生成或使用对应的证书。
测试中发现在 debian 环境下的 freeradius -X 不会自动生成证书（这点似乎与freeradius 官方的说明不一致）。&lt;/p&gt;
&lt;p&gt;删除原来生成的证书（生产环境下慎用）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cd /etc/freeradius/3.0/certs
# rm -f *.pem *.der *.csr *.crt *.key *.p12 serial* index.txt*
&lt;/pre&gt;
&lt;p&gt;生成根证书&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/freeradius/3.0/certs/ca.cnf
--------------------EDIT--------------------
[ CA_default ]
default_days            = 3600

[ req ]
input_password = whateverCA
output_password = whateverCA

[certificate_authority]
countryName             = CN
stateOrProvinceName     = Jiangxi
localityName            = Pingxiang
organizationName        = Organization Name
emailAddress            = radius&amp;#64;example.com
commonName              = &amp;quot;XXXXXX Certificate Authority&amp;quot;
--------------------------------------------

# make ca.pem
# make ca.der
&lt;/pre&gt;
&lt;p&gt;生成服务器证书（countryName, stateOrProvinceName, localityName 要与根证书一致？？）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/freeradius/3.0/certs/server.cnf
--------------------EDIT--------------------
[ CA_default ]
default_days            = 3600

[ req ]
input_password = whateverSVR
output_password = whateverSVR

[server]
countryName             = CN
stateOrProvinceName     = Jiangxi
localityName            = Pingxiang
organizationName        = Organization Name
emailAddress            = radius&amp;#64;example.com
commonName              = &amp;quot;XXXXXX Server Certificate&amp;quot;
--------------------------------------------

# make server.pem
&lt;/pre&gt;
&lt;p&gt;修改 eap 配置以使用新创建的证书&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/freeradius/3.0/mods-available/eap
--------------------EDIT--------------------
tls-config tls-common {
    private_key_password = whateverSVR
    private_key_file = ${cadir}/server.key
    certificate_file = ${cadir}/server.pem
    ca_file = ${cadir}/ca.pem
}
--------------------------------------------

# chown freerad:freerad server.key
# chown freerad:freerad server.pem
# chown freerad:freerad ca.pem

# systemctl restart freeradius
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="h3c-radius-802-1x"&gt;
&lt;h2&gt;七、在 H3C 设备上配置 Radius 并启用（无线）802.1x&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="x"&gt;
&lt;h2&gt;八、配置终端的 802.1x 访问&lt;/h2&gt;
&lt;p&gt;参考链接： &lt;a class="reference external" href="https://schoolsysadmin.blogspot.com/2016/03/freeradius-production-ssl-certificates.html"&gt;https://schoolsysadmin.blogspot.com/2016/03/freeradius-production-ssl-certificates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将根CA文件（ca.der）公开，方便用户在终端设备上导入；&lt;/p&gt;
&lt;p&gt;windows 下配置无线&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="FreeRadius"></category><category term="PostgreSQL"></category><category term="MAC Limit"></category></entry><entry><title>使用 BIND9 创建DNS服务器</title><link href="https://recozo.github.io/shi-yong-bind9-chuang-jian-dnsfu-wu-qi.html" rel="alternate"></link><published>2020-11-21T10:12:00+08:00</published><updated>2020-11-21T10:43:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-11-21:/shi-yong-bind9-chuang-jian-dnsfu-wu-qi.html</id><summary type="html">&lt;p&gt;本配置在 debian 10 下测试通过，默认环境为全新安装，仅安装 SSH 和 基础工具软件，
创建了一个普通用户 recozo，该用户开启 sudo 功能。&lt;/p&gt;
&lt;p&gt;参 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;本配置在 debian 10 下测试通过，默认环境为全新安装，仅安装 SSH 和 基础工具软件，
创建了一个普通用户 recozo，该用户开启 sudo 功能。&lt;/p&gt;
&lt;p&gt;参见：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.debian.org/bind9"&gt;https://wiki.debian.org/bind9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.linuxbabe.com/debian/dns-resolver-debian-10-buster-bind9"&gt;https://www.linuxbabe.com/debian/dns-resolver-debian-10-buster-bind9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="bind9"&gt;
&lt;h2&gt;一、安装 BIND9&lt;/h2&gt;
&lt;p&gt;使用以下命令安装 BIND9&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install bind9 bind9-doc dnsutils resolvconf
&lt;/pre&gt;
&lt;p&gt;检查版本及运行信息&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo named -v
$ systemctl status bind9
$ sudo netstat -lnptu | grep named
$ sudo rndc status
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configurations-for-a-local-dns-resolver"&gt;
&lt;h2&gt;二、Configurations for a Local DNS Resolver&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
sudo vi /etc/bind/named.conf.options
&lt;/pre&gt;
&lt;p&gt;In the options clause, add the following lines. Replace IP addresses in the allow-recursion statement with your own local network addresses.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
directory &amp;quot;/var/cache/bind&amp;quot;;

// If there is a firewall between you and nameservers you want
// to talk to, you may need to fix the firewall to allow multiple
// ports to talk.  See http://www.kb.cert.org/vuls/id/800113

// If your ISP provided one or more IP addresses for stable
// nameservers, you probably want to use them as forwarders.
// Uncomment the following block, and insert the addresses replacing
// the all-0's placeholder.

// forwarders {
//      0.0.0.0;
// };

//========================================================================
// If BIND logs error messages about the root key being expired,
// you will need to update your keys.  See https://www.isc.org/bind-keys
//========================================================================
// dnssec-validation auto;

// listen-on-v6 { any; };

// add by Recozo begin

// enable the query log
querylog yes;

// Transmit requests to 192.168.1.1 if
// this server doesn't know how to resolve them
forward only;
forwarders { 202.101.224.68; };

auth-nxdomain no;    # conform to RFC1035

// From 9.9.5 ARM, disables interfaces scanning to prevent unwanted stop listening
interface-interval 0;
// Listen on local interfaces only(IPV4)
listen-on-v6 { none; };
listen-on { 127.0.0.1; 10.62.9.105; };

// Accept requests for internal network only
allow-query { 127.0.0.1; 10.62.0.0/16; };

// Do not make public version of BIND
version none;

// add by Recozo end
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ sudo named-checkconf
$ sudo systemctl restart bind9
$ dig xxx.domainname.com
$ sudo journalctl -eu bind9
&lt;/pre&gt;
&lt;p&gt;三、Setting the Default DNS Resolver on Debian 10 Buster Server&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo systemctl start bind9-resolvconf

sudo systemctl enable bind9-resolvconf
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="bind9"></category><category term="dns"></category></entry><entry><title>自动挂机学习</title><link href="https://recozo.github.io/zi-dong-gua-ji-xue-xi.html" rel="alternate"></link><published>2020-09-01T00:16:00+08:00</published><updated>2020-10-04T13:07:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-09-01:/zi-dong-gua-ji-xue-xi.html</id><summary type="html">&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;下载 &lt;a class="reference external" href="https://www.google.com/chrome/"&gt;Chrome&lt;/a&gt; 以及 &lt;a class="reference external" href="https://chromedriver.chromium.org/downloads"&gt;ChromeDriver&lt;/a&gt; 并安装，注意 Chrome 与 ChromeDriver 的版本要相互支持&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Downloads
$ sudo apt install ./google-chrome-stable_current_amd64.deb
$ unzip chromedriver_linux64.zip
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装学习强国学习辅助程序源码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd Documents/
$ git clone …&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;下载 &lt;a class="reference external" href="https://www.google.com/chrome/"&gt;Chrome&lt;/a&gt; 以及 &lt;a class="reference external" href="https://chromedriver.chromium.org/downloads"&gt;ChromeDriver&lt;/a&gt; 并安装，注意 Chrome 与 ChromeDriver 的版本要相互支持&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Downloads
$ sudo apt install ./google-chrome-stable_current_amd64.deb
$ unzip chromedriver_linux64.zip
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装学习强国学习辅助程序源码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd Documents/
$ git clone https://github.com/TechXueXi/TechXueXi.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装辅助功能&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install python3-venv
$ cd ~/Documents/TechXueXi/SourcePackages
$ python3 -m venv .venv

$ source .venv/bin/activate
$ pip install requests
$ pip install selenium
$ cp ~/Downloads/chromedriver ~/Documents/TechXueXi/SourcePackages/
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;运行辅助学习程序&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Documents/TechXueXi/SourcePackages
$ source .venv/bin/activate

$ python pandalearning.py
&lt;/pre&gt;
&lt;p&gt;如果是因为缺少模块而报错，直接使用 pip install 模块名 即可解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;后续更新操作&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Documents/TechXueXi
$ git pull
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content><category term="tricks"></category><category term="chrome"></category><category term="chromedriver"></category><category term="selenium"></category></entry><entry><title>使用 OpenVPN 安全访问业务网络</title><link href="https://recozo.github.io/shi-yong-openvpn-an-quan-fang-wen-ye-wu-wang-luo.html" rel="alternate"></link><published>2020-09-01T10:12:00+08:00</published><updated>2020-10-02T10:43:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-09-01:/shi-yong-openvpn-an-quan-fang-wen-ye-wu-wang-luo.html</id><summary type="html">&lt;p&gt;本配置方法用于正常使用OPENVPN的同时，启用CA与证书令牌，
如有需要还可附加启用RADIUS用户与口令认证。&lt;/p&gt;
&lt;p&gt;本配置在 debian 11 下测试通过，默认环境为全新安装，仅安装 SSH …&lt;/p&gt;</summary><content type="html">&lt;p&gt;本配置方法用于正常使用OPENVPN的同时，启用CA与证书令牌，
如有需要还可附加启用RADIUS用户与口令认证。&lt;/p&gt;
&lt;p&gt;本配置在 debian 11 下测试通过，默认环境为全新安装，仅安装 SSH 和 基础工具软件，
创建了一个普通用户 recozo，该用户开启 sudo 功能，并且配置好了内外网卡地址。&lt;/p&gt;
&lt;p&gt;参见：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-debian-10"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-debian-10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.osradar.com/openvpn-authentication-with-freeradius/"&gt;https://www.osradar.com/openvpn-authentication-with-freeradius/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openvpn.net/community-resources/how-to/#using-alternative-authentication-methods"&gt;https://openvpn.net/community-resources/how-to/#using-alternative-authentication-methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;零、初始化&lt;/h2&gt;
&lt;p&gt;进入 root 用户，使用以下命令初始化系统&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install sudo
# adduser recozo sudo
# timedatectl set-timezone Asia/Shanghai
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="openvpn-1"&gt;
&lt;h2&gt;一、安装OpenVPN&lt;/h2&gt;
&lt;p&gt;使用以下命令安装 OpenVPN&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install openvpn
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;二、创建服务器证书和加密文件等&lt;/h2&gt;
&lt;p&gt;安装完OPENVPN后，默认自动安装了 easyrsa，可简化证书的日常管理操作。&lt;/p&gt;
&lt;p&gt;以下使用普通用户 recozo 进行操作，假定 CA 工作目录为 ~/bizCA
（该目录名可以根据需要自行设定，也可以在以后的操作中修改目录名，甚至可以删除该目录，前提是你要作废或重置 CA ）&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;初始化 easy-rsa&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ make-cadir ~/bizCA &amp;amp;&amp;amp; cd ~/bizCA
$ vi vars
&lt;/pre&gt;
&lt;p&gt;对以下参数进行配置，以设置新证书的默认值&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set_var EASYRSA_REQ_COUNTRY     &amp;quot;US&amp;quot;
set_var EASYRSA_REQ_PROVINCE    &amp;quot;California&amp;quot;
set_var EASYRSA_REQ_CITY        &amp;quot;San Francisco&amp;quot;
set_var EASYRSA_REQ_ORG         &amp;quot;Copyleft Certificate Co&amp;quot;
set_var EASYRSA_REQ_EMAIL       &amp;quot;me&amp;#64;example.net&amp;quot;
set_var EASYRSA_REQ_OU          &amp;quot;My Organizational Unit&amp;quot;
&lt;/pre&gt;
&lt;p&gt;初始化 ca 环境&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa init-pki
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;生成CA证书&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa build-ca nopass
&lt;/pre&gt;
&lt;p&gt;以上命令会生成 ca.crt 和 ca.key 两个文件，分别代表该 CA 的公钥与私钥(私钥必须严格保密),
根据实际可设置 Common Name(如 Company-Name CA)或使用默认值&lt;/p&gt;
&lt;p&gt;将以上生成的 ca 证书复制到 OpenVPN 目录下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cp pki/ca.crt /etc/openvpn/
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;生成服务器证书&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa gen-req VPNSVR nopass
$ ./easyrsa sign-req server VPNSVR
&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa build-server-full VPNSVR nopass
&lt;/pre&gt;
&lt;p&gt;将以上生成的服务器证书复制到 OpenVPN 目录下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cp pki/private/VPNSVR.key /etc/openvpn/
$ sudo cp pki/issued/VPNSVR.crt /etc/openvpn/
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;生成用于密钥交换的dh&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa gen-dh
$ sudo cp pki/dh.pem /etc/openvpn/dh2048.pem
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;生成的HMAC签名&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo openvpn --genkey secret ta.key
$ sudo chown recozo:recozo ta.key
$ sudo cp ta.key /etc/openvpn/
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="openvpn-2"&gt;
&lt;h2&gt;三、配置 OpenVPN 服务端&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;配置服务端配置文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/
$ sudo vi /etc/openvpn/server.conf
&lt;/pre&gt;
&lt;p&gt;更新 server.conf 文件内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
;proto tcp
proto udp

ca ca.crt
cert VPNSVR.crt
key VPNSVR.key

dh dh2048.pem

topology subnet

push &amp;quot;redirect-gateway def1 bypass-dhcp&amp;quot;        # 将客户端所有流量均从VPN转发，需要在防火墙设置NAT转换
push &amp;quot;dhcp-option DNS 208.67.222.222&amp;quot;           # 视情况，DNS也可以不设置
push &amp;quot;dhcp-option DNS 208.67.220.220&amp;quot;           # 视情况，DNS也可以不设置

tls-auth ta.key 0                               # This file is secret

cipher AES-256-CBC
auth SHA256

user nobody                                     # Windows 下无须设置
group nogroup                                   # Windows 下无须设置

log-append  /var/log/openvpn/openvpn.log        # 启用日志功能

# sndbuf 0                                      # 网上搜索解决OPENVPN速度过慢的解决方案
# rcvbuf 0                                      # 不过好像没有什么用啊
sndbuf 393216
rcvbuf 393216

push &amp;quot;sndbuf 393216&amp;quot;
push &amp;quot;rcvbuf 393216&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用 IP 转发（需要完成以下配置防火墙步骤，以启用NAT转发）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/sysctl.conf
&lt;/pre&gt;
&lt;p&gt;修改 sysctl.conf 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net.ipv4.ip_forward=1
&lt;/pre&gt;
&lt;p&gt;激活转发&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sysctl -p
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用服务端&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl start openvpn&amp;#64;server
$ sudo systemctl enable openvpn&amp;#64;server
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;四、配置防火墙&lt;/h2&gt;
&lt;p&gt;如果客户端要访问除OPENVPN所在服务器外的其它网络地址，配置 NAT 转换&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install iptables
$ sudo iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
&lt;/pre&gt;
&lt;p&gt;以下为防火墙强化操作，请根据需要使用，适用于不安全环境下使用。
使用 iptables-persistent 持久化保存防火墙规则，根据需要，仅启用IPV4，关闭IPV6。
以下默认使用双网口，eth0为外网口，eth1为内（业务）网口，如果为单网口，请自行脑补。&lt;/p&gt;
&lt;p&gt;参考链接：
&lt;a class="reference external" href="https://www.linode.com/docs/networking/vpn/set-up-a-hardened-openvpn-server/"&gt;https://www.linode.com/docs/networking/vpn/set-up-a-hardened-openvpn-server/&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;安装 iptables-persistent&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install iptables-persistent
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;编辑IPV4规则&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/iptables/rules.v4
&lt;/pre&gt;
&lt;p&gt;将该文件的内容替换为以下内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*filter

# Allow all loopback (lo) traffic and reject anything
# to localhost that does not originate from lo.
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -s 127.0.0.0/8 -j REJECT
-A OUTPUT -o lo -j ACCEPT

# Allow ping and ICMP error returns.
-A INPUT -p icmp -m state --state NEW --icmp-type 8 -j ACCEPT
-A INPUT -p icmp -m state --state ESTABLISHED,RELATED -j ACCEPT
-A OUTPUT -p icmp -j ACCEPT

# Allow SSH.
-A INPUT -i eth0 -p tcp -m state --state NEW,ESTABLISHED --dport 22 -j ACCEPT
-A OUTPUT -o eth0 -p tcp -m state --state ESTABLISHED --sport 22 -j ACCEPT

# 允许管理电脑互通访问
-A INPUT -i eth0 -s 10.62.192.252/30 -j ACCEPT
-A OUTPUT -o eth0 -d 10.62.192.252/30 -j ACCEPT

# 只允许业务电脑访问，Allow UDP traffic on port 1194.
-A INPUT -i eth0 -p udp -s 10.62.200.0/21 -m state --state NEW,ESTABLISHED --dport 1194 -j ACCEPT
-A OUTPUT -o eth0 -p udp -d 10.62.200.0/21 -m state --state ESTABLISHED --sport 1194 -j ACCEPT

# Allow DNS resolution and limited HTTP/S on eth0.
# Necessary for updating the server and timekeeping.
-A INPUT -i eth0 -p udp -m state --state ESTABLISHED --sport 53 -j ACCEPT
-A OUTPUT -o eth0 -p udp -m state --state NEW,ESTABLISHED --dport 53 -j ACCEPT
-A INPUT -i eth0 -p tcp -m state --state ESTABLISHED --sport 53 -j ACCEPT
-A OUTPUT -o eth0 -p tcp -m state --state NEW,ESTABLISHED --dport 53 -j ACCEPT

-A INPUT -i eth0 -p tcp -m state --state ESTABLISHED --sport 80 -j ACCEPT
-A OUTPUT -o eth0 -p tcp -m state --state NEW,ESTABLISHED --dport 80 -j ACCEPT
-A INPUT -i eth0 -p tcp -m state --state ESTABLISHED --sport 443 -j ACCEPT
-A OUTPUT -o eth0 -p tcp -m state --state NEW,ESTABLISHED --dport 443 -j ACCEPT

# Allow traffic on the TUN interface so OpenVPN can communicate.
-A INPUT -i tun0 -j ACCEPT
-A FORWARD -i tun0 -j ACCEPT
-A OUTPUT -o tun0 -j ACCEPT

# Allow forwarding traffic only from the VPN.
-A FORWARD -i tun0 -o eth1 -s 10.8.0.0/24 -j ACCEPT
-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

# Log any packets which don't fit the rules above.
# (optional but useful)
-A INPUT -m limit --limit 3/min -j LOG --log-prefix &amp;quot;iptables_INPUT_denied: &amp;quot; --log-level 4
-A FORWARD -m limit --limit 3/min -j LOG --log-prefix &amp;quot;iptables_FORWARD_denied: &amp;quot; --log-level 4
-A OUTPUT -m limit --limit 3/min -j LOG --log-prefix &amp;quot;iptables_OUTPUT_denied: &amp;quot; --log-level 4

# then reject them.
-A INPUT -j REJECT
-A FORWARD -j REJECT
-A OUTPUT -j REJECT

COMMIT
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;编辑IPV6规则（由于我们不需要IPV6，全部禁用）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/iptables/rules.v6
&lt;/pre&gt;
&lt;p&gt;将该文件的内容替换为以下内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*filter

-A INPUT -j REJECT
-A FORWARD -j REJECT
-A OUTPUT -j REJECT

COMMIT
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用防火墙规则&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo iptables-restore &amp;lt; /etc/iptables/rules.v4
$ sudo ip6tables-restore &amp;lt; /etc/iptables/rules.v6
$ sudo iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth1 -j MASQUERADE
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;保存规则&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo dpkg-reconfigure iptables-persistent
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;禁用IPV6功能&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/sysctl.d/99-sysctl.conf
&lt;/pre&gt;
&lt;p&gt;添加或修改以下内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.eth0.disable_ipv6 = 1
&lt;/pre&gt;
&lt;p&gt;激活以上配置&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sysctl -p
&lt;/pre&gt;
&lt;p&gt;注释掉IPV6的localhost解析&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/hosts

#::1     localhost ip6-localhost ip6-loopback
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;查看防火墙规则与日志&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo iptables -S                                      # 查看规则
$ sudo tail -f /var/log/messages                        # 查看日志
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;五、配置业务路由示例（双网卡）&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ sudo vi /etc/network/interfaces
&lt;/pre&gt;
&lt;p&gt;参考以下内容更新 interfaces 文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# The primary network interface
allow-hotplug eth0
iface eth0 inet static
        address 10.62.9.10/24
        # gateway 10.62.9.114
        # post-up ip route add default via 10.62.9.254 dev eth0
        # luxi vip hosts
        post-up ip route add 10.62.1.0/24 via 10.62.9.254 dev eth0
        post-up ip route add 10.62.192.252/30 via 10.62.9.254 dev eth0
        # luxi business private networks
        post-up ip route add 10.62.200.0/21 via 10.62.9.254 dev eth0
        # dns-* options are implemented by the resolvconf package, if installed
        dns-nameservers 10.62.9.114

# The vlan716 network interface
allow-hotplug eth1
iface eth1 inet static
        address 172.10.85.253/25
        post-up ip route add default via 172.10.85.254 dev eth1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="openvpn-3"&gt;
&lt;h2&gt;六、下发 OpenVPN 路由&lt;/h2&gt;
&lt;p&gt;可以根据需要在 /etc/openvpn/server.conf 中配置以下命令来指定客户端的路由设置&lt;/p&gt;
&lt;pre class="literal-block"&gt;
push &amp;quot;route 10.62.9.100 255.255.255.255 net_gateway&amp;quot;
&lt;/pre&gt;
&lt;p&gt;以上配置用于确保客户端能够正常访问指定的（安全认证）服务器。&lt;/p&gt;
&lt;p&gt;参见以下示例&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# redirect all default traffic via the VPN
push &amp;quot;redirect-gateway def1&amp;quot;
# redirect the Intranet network 192.168.1/24 via the VPN
push &amp;quot;route 192.168.1.0 255.255.255.0&amp;quot;
# redirect another network to NOT go via the VPN
push &amp;quot;route 10.10.0.0 255.255.255.0 net_gateway&amp;quot;
# redirect a host using a domainname to NOT go via the VPN
push &amp;quot;route www.google.ca 255.255.255.255 net_gateway&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;七、准备客户端配置管理文件&lt;/h2&gt;
&lt;p&gt;为方便客户端的配置管理，创建一个专用目录和用于自动生成客户端配置的文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir -p ~/client-configs/files
&lt;/pre&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;不使用令牌认证的常规配置&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf
$ vi ~/client-configs/base.conf
&lt;/pre&gt;
&lt;p&gt;使用以下内容更新 base.conf 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
proto udp                               # 与 server.conf 保持一致
remote 10.62.9.24 1194                  # 修改为本OPENVPN服务器的IP地址与端口号
user nobody                             # 仅适用于LINUX 客户端
group nogroup                           # 仅适用于LINUX 客户端
#ca ca.crt                              # 注释掉，包含在OVPN文件中
#cert client.crt                        # 注释掉，包含在OVPN文件中
#key client.key                         # 注释掉，包含在OVPN文件中
#tls-auth ta.key 1                      # 注释掉，包含在OVPN文件中
key-direction 1
cipher AES-256-CBC                      # 与 server.conf 保持一致
auth SHA256                             # 与 server.conf 保持一致
auth-nocache                            # 避免出现安全警告

# script-security 2                     # 仅适用于LINUX 客户端，自行决定是否添加
# up /etc/openvpn/update-resolv-conf    # 仅适用于LINUX 客户端，自行决定是否添加
# down /etc/openvpn/update-resolv-conf  # 仅适用于LINUX 客户端，自行决定是否添加
&lt;/pre&gt;
&lt;p&gt;生成 OVPN 的脚本&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vi ~/client-configs/make_config.sh
&lt;/pre&gt;
&lt;p&gt;使用以下内容生成 make_config.sh 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/bash

# First argument: Client identifier

CA_DIR=~/bizCA/
OUTPUT_DIR=~/client-configs/files
BASE_CONFIG=~/client-configs/base.conf

cat ${BASE_CONFIG} \
        &amp;lt;(echo -e '&amp;lt;ca&amp;gt;') \
        ${CA_DIR}pki/ca.crt \
        &amp;lt;(echo -e '&amp;lt;/ca&amp;gt;\n&amp;lt;cert&amp;gt;') \
        ${CA_DIR}pki/issued/${1}.crt \
        &amp;lt;(echo -e '&amp;lt;/cert&amp;gt;\n&amp;lt;key&amp;gt;') \
        ${CA_DIR}pki/private/${1}.key \
        &amp;lt;(echo -e '&amp;lt;/key&amp;gt;\n&amp;lt;tls-auth&amp;gt;') \
        ${CA_DIR}/ta.key \
        &amp;lt;(echo -e '&amp;lt;/tls-auth&amp;gt;') \
        &amp;gt; ${OUTPUT_DIR}/${1}.ovpn
&lt;/pre&gt;
&lt;p&gt;将脚本修改为可执行文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ chmod 700 ~/client-configs/make_config.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;使用飞天令牌的安全认证&lt;/h3&gt;
&lt;p&gt;启用epass1000ND的令牌认证，需要在客户端上预先安装epass1000ND的中间件
（使用EPASS1000ND（支持win10） v2.5 2015发布的），
然后在客户端配置文件中增加pkcs11-providers和pkcs11-id，
令牌制作方法见生成客户端证书以及配置文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/tokenbase.conf
$ vi ~/client-configs/tokenbase.conf
&lt;/pre&gt;
&lt;p&gt;使用以下内容更新 tokenbase.conf 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
proto udp                               # 与 server.conf 保持一致
remote 10.62.9.24 1194                  # 修改为本OPENVPN服务器的IP地址与端口号
user nobody                             # 仅适用于LINUX 客户端
group nogroup                           # 仅适用于LINUX 客户端
#ca ca.crt                              # 注释掉，包含在OVPN文件中
#cert client.crt                        # 注释掉，包含在OVPN文件中
#key client.key                         # 注释掉，包含在OVPN文件中
#tls-auth ta.key 1                      # 注释掉，包含在OVPN文件中
key-direction 1
cipher AES-256-CBC                      # 与 server.conf 保持一致
auth SHA256                             # 与 server.conf 保持一致
auth-nocache                            # 避免出现安全警告
# script-security 2                     # 仅适用于LINUX 客户端，自行决定是否添加
# up /etc/openvpn/update-resolv-conf    # 仅适用于LINUX 客户端，自行决定是否添加
# down /etc/openvpn/update-resolv-conf  # 仅适用于LINUX 客户端，自行决定是否添加

pkcs11-providers 'c:\windows\system32\ngp11v211.dll'
pkcs11-id 'TODO'                        # 需要生成令牌后获取实际 ID 后替换 TODO
&lt;/pre&gt;
&lt;p&gt;生成 OVPN 的脚本&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vi ~/client-configs/tokenmake_config.sh
&lt;/pre&gt;
&lt;p&gt;使用以下内容生成 tokenmake_config.sh 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/bash

# First argument: Client identifier

CA_DIR=/home/recozo/bizCA
OUTPUT_DIR=/home/recozo/client-configs/files
BASE_CONFIG=/home/recozo/client-configs/tokenbase.conf

cat ${BASE_CONFIG} \
        &amp;lt;(echo -e '&amp;lt;ca&amp;gt;') \
        ${CA_DIR}/pki/ca.crt \
        &amp;lt;(echo -e '&amp;lt;/ca&amp;gt;\n&amp;lt;tls-auth&amp;gt;') \
        ${CA_DIR}/ta.key \
        &amp;lt;(echo -e '&amp;lt;/tls-auth&amp;gt;') \
        &amp;gt; ${OUTPUT_DIR}/${1}.ovpn
&lt;/pre&gt;
&lt;p&gt;将脚本修改为可执行文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ chmod 700 ~/client-configs/tokenmake_config.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;八、生成客户端证书以及配置文件&lt;/h2&gt;
&lt;p&gt;生成客户端证书&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa gen-req VPNCLI0520-001 nopass
$ ./easyrsa sign-req client VPNCLI0520-001
&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./easyrsa build-client-full VPNCLI-001 nopass
&lt;/pre&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h3&gt;不使用令牌认证的常规配置&lt;/h3&gt;
&lt;p&gt;执行脚本生成 OVPN 文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ~/client-configs/make_config.sh VPNCLI-001
&lt;/pre&gt;
&lt;p&gt;以上命令会在 ~/client-configs/files 目录下生成 VPNCLI-001.ovpn 文件，
将该配置文件复制给客户端即可(具体使用请参考客户端的程序说明)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h3&gt;使用飞天令牌的安全认证&lt;/h3&gt;
&lt;p&gt;启用epass1000ND的令牌认证，需要在客户端上预先安装 PUTTY 和 epass1000ND 的中间件
（使用EPASS1000ND（支持win10） v2.5 2015发布的），
然后修改 ovpn 文件中的 pkcs11-id。&lt;/p&gt;
&lt;p&gt;在服务器上生成 ovpn 与 证书文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ~/client-configs/tokenmake_config.sh VPNCLI0520-001
$ ./easyrsa export-p12 VPNCLI0520-001 noca
&lt;/pre&gt;
&lt;p&gt;以上命令会在 pki/private 目录中生成 pkcs#12 证书文件，可用于导入至 epass1000ND
（附：$ ./easyrsa 可以查看该命令所支持的全部功能）&lt;/p&gt;
&lt;p&gt;将证书文件导入令牌的注意事项：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;目前只在windows环境下成功完成了操作（ windows 7 以及 windows 10 ）&lt;/li&gt;
&lt;li&gt;使用的令牌管理软件（目录）为 EPASS1000ND（支持win10）\win2.5\pki\V2.5-20150919\PKIcdrom\CDROM_CN\PKI&lt;/li&gt;
&lt;li&gt;令牌（USB KEY）第一次使用时，要进行初始化，插入 USB KEY 后，执行
EPASS1000ND（支持win10）\win2.5\pki\V2.5-20150919\PKIcdrom\CDROM_CN\PKI\Utilities\PKIINIT\PKIInit_M32.exe&lt;/li&gt;
&lt;li&gt;令牌的管理与用户密码统一设置规则定义： 管理密码为路由器密码，用户密码为vlan号+id
(如：VPNCLI0716-001 的用户密码为 0716 + 001 = 0717)&lt;/li&gt;
&lt;li&gt;使用 EPASS1000ND（支持win10）\win2.5\pki\V2.5-20150919\PKIcdrom\CDROM_CN\PKI\Utilities\ePassNgMgr.exe
导入前面所生成的证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下命令在安装了 OpenVPN 的 Windows 环境下运行，首先借助 pscp 复制刚才在服务器上生成的 ovpn 与 证书文件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\Users\recozo&amp;gt;pscp recozo&amp;#64;10.62.9.24:client-configs/files/VPNCLI0520-001.ovpn ./
C:\Users\recozo&amp;gt;pscp recozo&amp;#64;10.62.9.24:bizCA/pki/private/VPNCLI0520-001.p12 ./
&lt;/pre&gt;
&lt;p&gt;将p12导入令牌后，立即获取 Serialized id
（注意：openvpn2.4版本下显示的 Serialized id 不被支持，必须使用 openvpn 2.3版本获取 Serialized id，
你可以将 2.3版的文件复制到 windows 上，运行以下命令前定位到 2.3 版本的目录下）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.\openvpn --show-pkcs11-ids &amp;quot;c:\windows\system32\ngp11v211.dll&amp;quot;
&lt;/pre&gt;
&lt;p&gt;将获取的 Serialized id 替换 ovpn 文件中的 pkcs11-id （即 TODO），
将该配置文件和令牌给客户即可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="openvpn-radiusplugin"&gt;
&lt;h2&gt;九、为 OpenVPN 服务器安装 RadiusPlugin&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;解决依赖问题&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt-get install libgcrypt20-dev build-essential
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;下载插件&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# wget http://www.nongnu.org/radiusplugin/radiusplugin_v2.1a_beta1.tar.gz
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;解压缩&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# tar xf radiusplugin_v2.1a_beta1.tar.gz
# cd radiusplugin_v2.1a_beta1
# make
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;把编译好的模块拷贝适合的位置&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# mkdir /etc/openvpn/radius
# cp radiusplugin.so /etc/openvpn/radius
# cp radiusplugin.cnf /etc/openvpn/radius
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;配置 radiusplugin.cnf，配置前请在FreeRadius中增加nas记录&lt;/p&gt;
&lt;pre class="literal-block"&gt;
（insert into nas (nasname, shortname, secret, description) values (&amp;quot;Your Server IP&amp;quot;, &amp;quot;NAS001&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;单位名称 VLAN ID 的 OPENVPN&amp;quot;); ）

# vi /etc/openvpn/radius/radiusplugin.cnf
&lt;/pre&gt;
&lt;p&gt;修改 radiusplugin.cnf 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NAS-IP-Address=Your Server IP           #根据本机实际修改
server
{
        # The UDP port for radius accounting.
        acctport=1813
        # The UDP port for radius authentication.
        authport=1812
        # The name or ip address of the radius server.
        name=Your Radius Server IP              #根据FreeRadius服务器实际修改
        # How many times should the plugin send the if there is no response?
        retry=1
        # How long should the plugin wait for a response?
        wait=1
        # The shared secret.
        sharedsecret=password   # 与 FreeRadius 中的 nas 记录一致
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用RADIUS&lt;/p&gt;
&lt;p&gt;修改 server.conf&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/openvpn/server.conf
&lt;/pre&gt;
&lt;p&gt;在 server.conf 中增加以下内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
plugin /etc/openvpn/radius/radiusplugin.so /etc/openvpn/radius/radiusplugin.cnf
&lt;/pre&gt;
&lt;p&gt;修改 base.conf 或 tokenbase.conf&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# vi /etc/openvpn/client/base.conf
&lt;/pre&gt;
&lt;p&gt;在文件中加入下面这行内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auth-user-pass
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="openvpn"></category><category term="usb key"></category><category term="ca"></category></entry><entry><title>Vim 学习笔记</title><link href="https://recozo.github.io/vim-xue-xi-bi-ji.html" rel="alternate"></link><published>2020-10-02T10:43:00+08:00</published><updated>2020-10-02T10:43:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-10-02:/vim-xue-xi-bi-ji.html</id><summary type="html">&lt;p class="first last"&gt;vi 与 vim 的学习笔记&lt;/p&gt;
</summary><content type="html">&lt;p&gt;连续录入多个相同的字符( &lt;a class="reference external" href="https://stackoverflow.com/questions/5054128/repeating-characters-in-vim-insert-mode"&gt;参见&lt;/a&gt; ):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
50i- ESC
# 如果当前是 INSERT 模式，可以使用 CTRL + O 临时进入命令模式
CTRL+O 50i- ESC
# CTRL+O 用于临时进入命令模式
# 50 表示要重复的字数
# i 表示插入命令
# - 要插入的字符
# ESC 离开插入模式（其实是退出当前的临时命令）
&lt;/pre&gt;
&lt;p&gt;在10行和112行之间插入4空格:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
10,112 s/^/    /
&lt;/pre&gt;
&lt;p&gt;删除空行以及只有空格的行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:g/^\s*$/d
&lt;/pre&gt;
&lt;p&gt;恢复删除操作:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vi对删除(d or x)或复制(y)有各自专用的 buffer，
删除buffer会自动保留最近的9个删除操作(行内删除除外)至buffer，9个删除自动按照1-9保存，最近一次删除保存在1；
可以使用 &amp;quot;1pu.u.u etc 命令查看各个删除的内容

复制buffer可保留26个命名（从a-z）复制内容，如果复制时未使用命名，自动使用a??
&amp;quot;d7yy
&amp;quot;a5dd
此处注意dd操作会分别保存在删除buffer 1中和复制buffer a 中
&lt;/pre&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;代码编辑操作&lt;/h2&gt;
&lt;p&gt;在 vi 中有些功能可以帮助程序员进行代码编辑，如缩进、搜索代码块&lt;/p&gt;
&lt;p&gt;缩进设置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set autoindent             用于开启缩进功能
:set shiftwidth=4   用于设置缩进（量）
:set list           用于查看TAB与EOF，TAB 显示为 ^I，EOF 显示为 $
&lt;/pre&gt;
&lt;p&gt;或者:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set ai sw=4                省略格式
&lt;/pre&gt;
&lt;p&gt;当处于编辑状态时可以使用以下快捷键快速调整缩进:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-T              增加一个缩进
CTRL-D              减少一个缩进
^ CTRL-D    （输入的^在CTRL-D会自动删除）当前行删除全部缩进，即当前行的缩进为0，但是此时输入回车后，下一行仍然会保留之前的缩进
0 CTRL-D    （输入的0在CTRL-D会自动删除）当前行删除全部缩进，即当前行的缩进为0，但是此时输入回车后，下一行缩进为0
&lt;/pre&gt;
&lt;p&gt;当处于命令状态时可以使用以下命令调整缩进:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;          增加缩进，5&amp;gt;&amp;gt; 增加5个缩进宽度 set shiftwidth=4 指定的
&amp;lt;&amp;lt;          减少缩进，5&amp;lt;&amp;lt; 减少5个缩进宽度
&lt;/pre&gt;
&lt;p&gt;当处于命令状态时，可以使用 % 查看对应的 () [] {}，如果光标没有在括号上，vi 会自动从光标位置向前查找当前行的括号，然后移动到对应的括号上去;
另一个有用的技巧是打开以下设置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set showmatch
&lt;/pre&gt;
&lt;p&gt;与 % 不同的是，这个功能主要是用于编辑状态，当你输入 ) ] } 时，光标会短暂跳转到对应的括号，如果不存在对应的括号，会 beep，当然如果对应的括号不在当前屏幕，vi 会当没事一样&lt;/p&gt;
&lt;div class="section" id="ex"&gt;
&lt;h3&gt;ex 编辑器介绍&lt;/h3&gt;
&lt;p&gt;vi 可以视为基于 ex 之上的可视化编辑器；ex 作为行编辑器，其命令的格式为 :[行号][命令]。&lt;/p&gt;
&lt;p&gt;相对多数的 ex 命令而言，vi 本身也提供了对应的命令，而且一般来说 vi 的命令更加便捷，
但是如果涉及到多行操作命令，ex 命令仍然有其自身优势，比如全文寻找并/或替换词语等&lt;/p&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h4&gt;行号地址说明&lt;/h4&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="61%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;多行01&lt;/td&gt;
&lt;td&gt;:3,18d&lt;/td&gt;
&lt;td&gt;删除3至18行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;多行02&lt;/td&gt;
&lt;td&gt;:160,224m23&lt;/td&gt;
&lt;td&gt;将160至224行移动到23行之后（类似 vi 的 delete 和 put）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;多行03&lt;/td&gt;
&lt;td&gt;:23,29co100&lt;/td&gt;
&lt;td&gt;将23至29行复制到100行之后（类似 vi 的 yank 和 put）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;符号01&lt;/td&gt;
&lt;td&gt;:.,$d&lt;/td&gt;
&lt;td&gt;将当前行至最尾行删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;符号02&lt;/td&gt;
&lt;td&gt;:20,.m$&lt;/td&gt;
&lt;td&gt;将20行到当前行的内容移动到文件尾行之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;符号03&lt;/td&gt;
&lt;td&gt;:%t$&lt;/td&gt;
&lt;td&gt;将所有行复制到文件尾行之行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;重定义当前行&lt;/td&gt;
&lt;td&gt;:100,+5p&lt;/td&gt;
&lt;td&gt;错误的作法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;重定义当前行&lt;/td&gt;
&lt;td&gt;:100;+5p&lt;/td&gt;
&lt;td&gt;正确的做法，打印100行到其后5行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;重定义当前行&lt;/td&gt;
&lt;td&gt;:/pattern/;+5p&lt;/td&gt;
&lt;td&gt;打印下一个包含模式的行到其后5行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h4&gt;全局替换说明&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
:s/old/new/
&lt;/pre&gt;
&lt;p&gt;对当前行第一次出现的 old 替换为 new&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:s/old/new/g
&lt;/pre&gt;
&lt;p&gt;对当前所有出现的 old 均替换为 new，此处未尾处的 g 选项影响本行中的每个模式，
注意不要与 :g 命令（全局搜索）搞混了， :g 命令影响文件（指定行号范围）中的每一行。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:50,100s/old/new/g
&lt;/pre&gt;
&lt;p&gt;对50到100行所有的 old 替换为 new。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:1,$s/old/new/g
:%s/old/new/g
&lt;/pre&gt;
&lt;p&gt;以上二条命令作用一样，对文件中所有出现的 old 替换为 new。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:%s/old/new/gc
&lt;/pre&gt;
&lt;p&gt;以上命令需要对每个替换进行确认，通过人工检查防止不符合要求的替换。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:g/pattern/s/old/new/g
&lt;/pre&gt;
&lt;p&gt;以上可称为上下文替换操作，即通过第一个 :g/pattern/ 命令找到所有符合模式要求的行，
然后对以上找到的行执行 s/old/new/g，即对所找到的行中，进行 old 到 new 的替换。&lt;/p&gt;
&lt;p&gt;如果搜索模式与替换内容一样可以省略替换内容，如以下二个写法作用一样&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:g/old/s/old/new/g
:g/old/s//new/g
&lt;/pre&gt;
&lt;p&gt;此时要注意的是，其实以上的写法与以下的写法效果也是一样的&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:%s/old/new/g
&lt;/pre&gt;
&lt;p&gt;而这种写法是最简化的，&lt;/p&gt;
&lt;p&gt;另外请注意，:g 命令也可以结合 :d :m :t 等 ex 命令使用，换而言之，:g 命令相当于是一个行号范围。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;窗口操作&lt;/h2&gt;
&lt;p&gt;在 vim 中支持多窗口，可以打开多个窗口编辑，方便大多个文件中相互复制内容或相互参考内容&lt;/p&gt;
&lt;p&gt;使用命令行打开多个窗口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim -o file1 file2          小写o以纵向方式打开二个窗口
vim -O5 file1 file2         大写O以水平方式打开五个窗口
&lt;/pre&gt;
&lt;p&gt;在 vim 内开窗口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:split filename             纵向开窗口，如果不录入 filename ，会打开当前编辑的同一文件（buffer）
:vsplit filename            水平开窗口，如果不录入 filename ，会打开当前编辑的同一文件（buffer）
:new                        纵向开窗口（空文件）
CTRL-W s                    纵向开窗口（当前同一文件）
CTRL-W v                    水平开窗口（当前同一文件）
CTRL-W n                    纵向开窗口（空文件）
&lt;/pre&gt;
&lt;p&gt;切换窗口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-W h
CTRL-W j
CTRL-W k
CTRL-W l                    以上命令与 h j k l 的移动方面一致
CTRL-W w                    以从上到下从左到右的方式循环切换窗口
CTRL-W t                    移动到左上角窗口
CTRL-W b                    移动到右下角窗口
CTRL-W p                    回到上一个（最近访问过的）窗口
&lt;/pre&gt;
&lt;p&gt;移动窗口（不改动布局）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-W r                    将当前窗口与右或下窗口交换位置，当右或下没窗口时与第一个交换
CTRL-W R                    将当前窗口与左或上窗口交换位置，当左或上没窗口时与最后一个窗口交换
CTRL-W x                    将当前窗口与右或下窗口交换位置，当右或下没窗口时，与前一个窗口交换位置
3CTRL-W x                   将当前窗口与右或下第3个窗口交换位置
&lt;/pre&gt;
&lt;p&gt;移动窗口（改动布局）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-W K                    将当前窗口移至最上方（全宽）
CTRL-W J                    将当前窗口移至最下方（全宽）
CTRL-W H                    将当前窗口移至最左边（全高）
CTRL-W L                    将当前窗口移至最右边（全高）
CTRL-W T                    将当前窗口移至一个新标签页
&lt;/pre&gt;
&lt;p&gt;调整窗口大小:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-W =                    将所有窗口调整为一样大小
:resize n                   设置窗口高度（行），如果不指定 n，则为可能的最大高度
:resize +n                  增加窗口高度 n 行
:resize -n                  减少窗口高度 n 行
:vertical resize n          设置窗口宽度（列），如果不指定 n，则为可能的最大宽度
:vertical resize +n         增加窗口宽度 n 列
:verticla resize -n         减少窗口宽度 n 列
&lt;/pre&gt;
&lt;p&gt;BUFFERS操作:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:windo cmd                  对当前标签页的所有buffer（窗口）执行cmd操作
:windo %s/oldcontent/newcontent/g
:bufdo cmd                  对所有标签页的所有buffer（窗口）执行cmd操作
&lt;/pre&gt;
&lt;p&gt;标签页操作:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:tabnew filename            新建一个标签页，如果不指定filename，即打一个空文档
:tabclose                   关闭当前标签页
:tabonly                    关闭其它标签页
&lt;/pre&gt;
&lt;p&gt;关闭或退出窗口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CTRL-W q 或 :quit            退出窗口
CTRL-W c 或 :close           关闭窗口
CTRL-W o 或 :only            关闭其它窗口
:hide [cmd]                 退出窗口并隐藏buffer
以上命令其它均要考虑buffer，但是暂时还没有使用buffer的高级用途，待以后吧 TODO
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tricks"></category><category term="vi"></category><category term="vim"></category></entry><entry><title>如何修改主机名和重置SSH</title><link href="https://recozo.github.io/ru-he-xiu-gai-zhu-ji-ming-he-zhong-zhi-ssh.html" rel="alternate"></link><published>2020-10-02T00:34:00+08:00</published><updated>2020-10-02T00:34:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-10-02:/ru-he-xiu-gai-zhu-ji-ming-he-zhong-zhi-ssh.html</id><summary type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;虚拟机下常用功能&lt;/h2&gt;
&lt;p&gt;一、修改主机名称:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# hostnamectl set-hostname HostA
# vi /etc/hosts
# vi /etc/network/interfaces
# vi /etc/resolv.conf
&lt;/pre&gt;
&lt;p&gt;二、重新生成SSH主机KEY:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# rm -v /etc/ssh/ssh_host_*
# dpkg-reconfigure openssh-server
&lt;/pre&gt;
&lt;p&gt;三、更新系统:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt update
# apt …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;虚拟机下常用功能&lt;/h2&gt;
&lt;p&gt;一、修改主机名称:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# hostnamectl set-hostname HostA
# vi /etc/hosts
# vi /etc/network/interfaces
# vi /etc/resolv.conf
&lt;/pre&gt;
&lt;p&gt;二、重新生成SSH主机KEY:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# rm -v /etc/ssh/ssh_host_*
# dpkg-reconfigure openssh-server
&lt;/pre&gt;
&lt;p&gt;三、更新系统:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt update
# apt upgrade
&lt;/pre&gt;
&lt;p&gt;四、删除某个 systemd 服务&lt;/p&gt;
&lt;blockquote&gt;
# systemctl stop [servicename]
# systemctl disable [servicename]
# rm /etc/systemd/system/[servicename]
# rm /etc/systemd/system/[servicename] # and symlinks that might be related
# rm /usr/lib/systemd/system/[servicename]
# rm /usr/lib/systemd/system/[servicename] # and symlinks that might be related
# systemctl daemon-reload
# systemctl reset-failed&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://superuser.com/questions/513159/how-to-remove-systemd-services"&gt;https://superuser.com/questions/513159/how-to-remove-systemd-services&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;五、彻底删除某应用&lt;/p&gt;
&lt;blockquote&gt;
# sudo apt autoremove --purge [applicationname]&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://howtoinstall.co/en/debian/wheezy/bind9?action=remove"&gt;https://howtoinstall.co/en/debian/wheezy/bind9?action=remove&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;六、清除 BASH 历史&lt;/p&gt;
&lt;blockquote&gt;
cat /dev/null &amp;gt; ~/.bash_history &amp;amp;&amp;amp; history -c &amp;amp;&amp;amp; exit&lt;/blockquote&gt;
&lt;p&gt;四、阿里云主机IP的设置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cd /etc/systemd/network
# ls
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="debian"></category></entry><entry><title>谁在暗中连网，中招了？</title><link href="https://recozo.github.io/shui-zai-an-zhong-lian-wang-zhong-zhao-liao.html" rel="alternate"></link><published>2020-10-02T00:34:00+08:00</published><updated>2020-10-02T00:34:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-10-02:/shui-zai-an-zhong-lian-wang-zhong-zhao-liao.html</id><summary type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;时间同步的有关问题&lt;/h2&gt;
&lt;p&gt;今天在新装服务器的时候，设置并启用防火墙后查看日志，发现间隔一段时间就有被拦截的访问外 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;时间同步的有关问题&lt;/h2&gt;
&lt;p&gt;今天在新装服务器的时候，设置并启用防火墙后查看日志，发现间隔一段时间就有被拦截的访问外网记录……
不应该的啊，原来一直都没有出现过这种情况啊？？！！谁在暗中连网，中招了？？？&lt;/p&gt;
&lt;p&gt;上网搜索了被拦截的IP访问地址，发现都是指向网络时间服务器，一下子就释然了，
不过一下子又好奇了，一直没有怎么关注 debian 下的时间同步功能，于是找了下有关资料，&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-time-synchronization-on-debian-10"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-time-synchronization-on-debian-10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我现在使用的是 debian 10.6的版本，使用的是 systemd-timesyncd，等下次有需要再仔细了解一下。&lt;/p&gt;
&lt;/div&gt;
</content><category term="debian"></category></entry><entry><title>百度 API 应用</title><link href="https://recozo.github.io/bai-du-api-ying-yong.html" rel="alternate"></link><published>2020-09-15T00:16:00+08:00</published><updated>2020-09-15T00:16:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-09-15:/bai-du-api-ying-yong.html</id><summary type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;百度分享的使用&lt;/h2&gt;
&lt;p&gt;百度分享的网站目前已经关了，不过功能目前好像还有用，暂时先用着吧……&lt;/p&gt;
&lt;p&gt;参考： &lt;a class="reference external" href="https://www.cnblogs.com/cyhan/p/11671566.html"&gt;https://www.cnblogs.com/cyhan/p/11671566.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里完 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;百度分享的使用&lt;/h2&gt;
&lt;p&gt;百度分享的网站目前已经关了，不过功能目前好像还有用，暂时先用着吧……&lt;/p&gt;
&lt;p&gt;参考： &lt;a class="reference external" href="https://www.cnblogs.com/cyhan/p/11671566.html"&gt;https://www.cnblogs.com/cyhan/p/11671566.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里完整的展示一下插件如何编写。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;插入百度分享插件js文件&lt;/p&gt;
&lt;p&gt;官方插件不支持https，如果要用https的话可下载 &lt;a class="reference external" href="https://github.com/hrwhisper/baiduShare/"&gt;支持HTTPS百度分享插件&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;下载后需要把 static 文件夹放在网站的根目录下，
并将百度分享代码中的 &lt;a class="reference external" href="http://bdimg.share.baidu.com/"&gt;http://bdimg.share.baidu.com/&lt;/a&gt; 改为 / 。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with (document) 0[(getElementsByTagName('head')[0] || body)
    .appendChild(createElement('script'))
    .src = '/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;代码结构&lt;/p&gt;
&lt;p&gt;分享代码可以分为三个部分：HTML、设置和js加载，示例如下：&lt;/p&gt;
&lt;p&gt;代码结构&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div class=&amp;quot;bdsharebuttonbox&amp;quot; data-tag=&amp;quot;share_1&amp;quot;&amp;gt;
        &amp;lt;!-- 此处添加展示按钮 --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    window._bd_share_config = {
    //此处添加分享具体设置
    }

    //以下为js加载部分
    with(document)0[(getElementsByTagName('head')[0]||body)
        .appendChild(createElement('script'))
        .src='http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion='+~(-new Date()/36e5)];
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;按钮标签&lt;/p&gt;
&lt;p&gt;按钮标签代码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div class=&amp;quot;bdsharebuttonbox&amp;quot; data-tag=&amp;quot;share_1&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;bds_mshare&amp;quot; data-cmd=&amp;quot;mshare&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_qzone&amp;quot; data-cmd=&amp;quot;qzone&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_tsina&amp;quot; data-cmd=&amp;quot;tsina&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_baidu&amp;quot; data-cmd=&amp;quot;baidu&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_renren&amp;quot; data-cmd=&amp;quot;renren&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_tqq&amp;quot; data-cmd=&amp;quot;tqq&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_more&amp;quot; data-cmd=&amp;quot;more&amp;quot;&amp;gt;更多&amp;lt;/a&amp;gt;
    &amp;lt;a class=&amp;quot;bds_count&amp;quot; data-cmd=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;只有普通页面分享需要按钮标签。划词分享、图片分享无需添加HTML结构。&lt;/p&gt;
&lt;p&gt;HTML结构可以放在body的任意位置，可复制多份。&lt;/p&gt;
&lt;p&gt;class＝&amp;quot;bdsharebuttonbox&amp;quot; 部分为dom选择器，请勿改动。&lt;/p&gt;
&lt;p&gt;data-tag属性为分享按钮标识，用于实现同一页面中多分享按钮不同配置，详见设置部分。&lt;/p&gt;
&lt;p&gt;data-cmd属性为分享目标标识，取值请参见：分享媒体id对应表。此外值为more时点击展现更多弹窗，值为count时展现分享数。&lt;/p&gt;
&lt;p&gt;HTML代码中其他部分均可自定义。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;在网页嵌入百度地图&lt;/h2&gt;
&lt;p&gt;参考： &lt;a class="reference external" href="http://lbsyun.baidu.com/jsdemo.htm#a7_1"&gt;http://lbsyun.baidu.com/jsdemo.htm#a7_1&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;initial-scale=1.0, user-scalable=no&amp;quot; /&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
        #allmap {height:400px;width: 600px;margin: 0;overflow: hidden;font-family:&amp;quot;微软雅黑&amp;quot;;}
    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//api.map.baidu.com/api?v=2.0&amp;amp;ak=您的密钥&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;关闭默认地图POI事件&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;allmap&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        // 百度地图API功能
    var map = new BMap.Map(&amp;quot;allmap&amp;quot;);
    var point = new BMap.Point(114.040208,27.635682);
    map.centerAndZoom(point, 17);
    var marker = new BMap.Marker(point);  // 创建标注
    map.addOverlay(marker);               // 将标注添加到地图中
    marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画
    map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tricks"></category><category term="baidu"></category><category term="api"></category></entry><entry><title>XFCE 使用技巧</title><link href="https://recozo.github.io/xfce-shi-yong-ji-qiao.html" rel="alternate"></link><published>2020-09-01T00:16:00+08:00</published><updated>2020-09-01T00:16:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-09-01:/xfce-shi-yong-ji-qiao.html</id><summary type="html">&lt;div class="section" id="xfce-panel"&gt;
&lt;h2&gt;XFCE Panel 消失了&lt;/h2&gt;
&lt;p&gt;在远程桌面中使用本地资源共享硬盘时，时常会死机（原因待查）。&lt;/p&gt;
&lt;p&gt;有次死机后，重新启动服务器后，远程登录后发 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="xfce-panel"&gt;
&lt;h2&gt;XFCE Panel 消失了&lt;/h2&gt;
&lt;p&gt;在远程桌面中使用本地资源共享硬盘时，时常会死机（原因待查）。&lt;/p&gt;
&lt;p&gt;有次死机后，重新启动服务器后，远程登录后发现顶部的菜单和底部的快捷栏都不见了（本地登录正常）！！！&lt;/p&gt;
&lt;p&gt;参见：&lt;a class="reference external" href="https://forum.xfce.org/viewtopic.php?id=6751"&gt;https://forum.xfce.org/viewtopic.php?id=6751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重置保存的会话缓存后，恢复正常&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ rm -rf ~/.cache/sessions
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tricks"></category><category term="xfce"></category></entry><entry><title>使用 Pelican 维护静态网站</title><link href="https://recozo.github.io/install-pelican-on-debian.html" rel="alternate"></link><published>2020-02-03T13:49:00+08:00</published><updated>2020-08-28T00:49:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-02-03:/install-pelican-on-debian.html</id><summary type="html">&lt;p&gt;Pelican 是一个使用Python编写开发的静态网站静态网站内容生成器。
其实在 github 上有官方推荐的静态网站内容生成器，但是基于以下原因还是选择了 Pelican&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持 reStructuredText 编写内容&lt;/li&gt;
&lt;li&gt;使用 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Pelican 是一个使用Python编写开发的静态网站静态网站内容生成器。
其实在 github 上有官方推荐的静态网站内容生成器，但是基于以下原因还是选择了 Pelican&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持 reStructuredText 编写内容&lt;/li&gt;
&lt;li&gt;使用 Python 开发&lt;/li&gt;
&lt;li&gt;打算转向 Python 进行程序开发，好吧，这理由有点勉强……&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;安装系统，可参照安装远程开发桌面环境&lt;/h2&gt;
&lt;p&gt;记得执行以下命令设置git用户信息:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install git
$ git config --global user.email &amp;quot;recozo&amp;#64;outlook.com&amp;quot;
$ git config --global user.name &amp;quot;Recozo&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-1"&gt;
&lt;h2&gt;安装 PELICAN&lt;/h2&gt;
&lt;p&gt;输入以下命令安装pelican并设置相关的运行环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Documents
$ mkdir mysite &amp;amp;&amp;amp; cd mysite
$ python3 -m venv .venv
$ source .venv/bin/activate
$ pip install pelican python-magic wheel ghp-import sphinx sphinx-autobuild rstcheck
$ pip freeze | grep pelican &amp;gt; requirements.txt
$ pip freeze | grep python-magic &amp;gt; requirements.txt
$ pip freeze | grep ghp-import &amp;gt;&amp;gt; requirements.txt
$ pip freeze | grep sphinx &amp;gt;&amp;gt; requirements.txt
$ pip freeze | grep sphinx-autobuild &amp;gt;&amp;gt; requirements.txt
$ pip freeze | grep rstcheck &amp;gt;&amp;gt; requirements.txt
$ pelican-quickstart
$ touch README.rst
$ vi .gitignore
&lt;/pre&gt;
&lt;p&gt;参照 &lt;a class="reference external" href="https://github.com/github/gitignore/blob/master/Python.gitignore"&gt;https://github.com/github/gitignore/blob/master/Python.gitignore&lt;/a&gt;
以及以下内容录入 .gitignore 内容&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#pelican
output/
&lt;/pre&gt;
&lt;p&gt;继续执行以下命令&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git init
$ git add -A
$ git commit -a -m 'Initial commit'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;发布第一篇文章&lt;/h2&gt;
&lt;p&gt;# 在 content 目录中保存文章:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vi content/welcome-to-my-blog.rst
&lt;/pre&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Welcome to my blog !
####################

:date: 2020-08-28 01:30
:modified: 2020-08-29 10:15
:tags: essay
:category: article

Hello, welcome to my first blog !
&lt;/pre&gt;
&lt;p&gt;保存文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;查看当前所有配置&lt;/h2&gt;
&lt;p&gt;使用以下命令可以查看当前的所有配置（包括默认配置）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pelican --print-settings
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;使用主题&lt;/h2&gt;
&lt;p&gt;在社区管理维护的 &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes&lt;/a&gt; 中，
有多个主题可供使用，目前我们使用的是 Flex 。
尽管可以直接通过 Pelican Themes 安装并使用主题，但是更新有所滞后，
所以我们还是直接克隆 Flex 的 github 库（在我们自己的 Fork）。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;下载主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Documents
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/recozo/Flex.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pelican-themes&lt;span class="w"&gt; &lt;/span&gt;--install&lt;span class="w"&gt; &lt;/span&gt;~/Documents/Flex&lt;span class="w"&gt; &lt;/span&gt;--verbose
$&lt;span class="w"&gt; &lt;/span&gt;pelican-themes&lt;span class="w"&gt; &lt;/span&gt;--list
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用主题，可以通过 pelican content -t your-theme-path
也可以通过在配置文件中定义 THEME 启用主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pelicanconf.py&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./.venv/lib/python3.10/site-packages/pelican/themes/Flex&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;链接到内部内容&lt;/h2&gt;
&lt;p&gt;内部内容指保存在 content 目录中的文件（如图片、PDF等）&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 filename&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://recozo.github.io/images/test01.jpeg"&gt;a link relative to the current image file&lt;/a&gt;
&lt;a class="reference external" href="https://recozo.github.io/pdfs/PythonTestingWithSelenium.pdf"&gt;a link relative to the current pdf file&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 static，此时即使指定的文件所在目录不在 STATIC_PATHS 中，
该文件（及目录）也会被复制到 output 目录中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://recozo.github.io/images/test01.jpeg"&gt;a link static to the current image file&lt;/a&gt;
&lt;a class="reference external" href="https://recozo.github.io/pdfs/PythonTestingWithSelenium.pdf"&gt;a link static to the current pdf file&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="restructuredtext"&gt;
&lt;h2&gt;启用 restructuredtext 扩展&lt;/h2&gt;
&lt;p&gt;安装 reStructuredText 扩展后， &lt;a class="reference external" href="https://docs.restructuredtext.net/articles/prerequisites"&gt;请查看使用该扩展前的前置依赖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次使用时，可使用 sphinx-quickstart 创建相关配置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;查看网站效果以及内容&lt;/h2&gt;
&lt;p&gt;运行以下命令生成网站内容（网站内容有更新时自动重新生成，忽略缓存以避免更新内容不显示）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pelican --autoreload --listen --ignore-cache
&lt;/pre&gt;
&lt;p&gt;在浏览器中访问以下地址可检查网站效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8000
&lt;/pre&gt;
&lt;p&gt;可以开几个终端，编辑信息，然后在浏览器中查看编辑后的效果&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h2&gt;使用 GITHUB 发布网站以及源文件&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;在 github.com 创建项目 recozo.github.io，将本地与项目进行绑定:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git remote add origin https://github.com/recozo/recozo.github.io.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;将源文件保存为 pelican 分支:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git push -u origin master:pelican
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;发布项目网站(&lt;a class="reference external" href="https://recozo.github.io"&gt;https://recozo.github.io&lt;/a&gt;)内容:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pelican content/ -o output -s publishconf.py
$ ghp-import output -b gh-pages
$ git push origin gh-pages:master
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="git-recozo-github-io"&gt;
&lt;h2&gt;使用 GIT 在本地还原 recozo.github.io 项目&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/Documents
$ git clone https://github.com/recozo/recozo.github.io.git pelican
$ cd pelican/
$ git branch -m master
$ git fetch origin master:gh-pages
$ python3 -m venv .venv
$ source .venv/bin/activate
$ pip install -r requirements.txt
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h2&gt;利用 GIT 恢复或撤销操作&lt;/h2&gt;
&lt;p&gt;如果需要恢复或撤销已经提交了的操作&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;git reset --soft HEAD~
把该分支移动回原来的位置，而不会改变索引和工作目录&lt;/li&gt;
&lt;li&gt;git reset [--mixed] HEAD~
撤销一上次的提交，还会取消暂存区所有的东西&lt;/li&gt;
&lt;li&gt;git reset --hard HEAD~
撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果需要同时撤销已经发布到GITHUB的操作&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 查看提交的日志（版本）
git log
# 本地仓库回退到某一版本
git reset --hard xxxx
# 强制 PUSH，此时远程分支已经恢复成指定的 commit 了
git push origin master --force
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;关于浏览器缓冲的问题&lt;/h2&gt;
&lt;p&gt;将 Pelican 从 4.2 升级到了 4.5 ，当访问 &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; 时，
总是不能打开 index.html，每次都弹出下载界面，无论是 Firefox 还是 Chrome，都这毛病，以为是升级的原因，
重新弄了台虚拟机，重新安装还是出这个问题，浪费了二天的时间找原因（不过也不是完全浪费，学到了如何 DEBUG），
最后发现是浏览器缓存导致的问题，删除缓存后能正常访问，但是由于缓存功能没有关闭，后续仍然会出问题。&lt;/p&gt;
&lt;p&gt;不建议停用浏览器的缓存功能， Firefox 支持启用开发者模式时禁用 HTTP 缓存 （F12 进入开发者模式，
F1 进入设置即可在 Advanced settings 看到这个选项 Disable HTTP Cache(when toolbox is open)），
爽不？！&lt;/p&gt;
&lt;p&gt;注意，要安装 python-magic ，在 pelican 的 server.py 的 guess_type 是通过 python-magic 进行处理的，
如果未安装，即仍然会弹出下载界面。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vscode-pelican"&gt;
&lt;h2&gt;在 VSCODE 中调试 Pelican&lt;/h2&gt;
&lt;p&gt;在 .vscode 目录下新建一个 launch.json 文件，录入以下内容，即可在 VSCODE 中对 Pelican 进行断点调试了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [

        {
            &amp;quot;name&amp;quot;: &amp;quot;Python: Module&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;module&amp;quot;: &amp;quot;pelican&amp;quot;,
            &amp;quot;args&amp;quot;:[&amp;quot;--listen&amp;quot;],
            &amp;quot;justMyCode&amp;quot;: false,
        }
    ]
}
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="pelican"></category><category term="git"></category><category term="github"></category><category term="vscode"></category></entry><entry><title>安装远程开发桌面环境</title><link href="https://recozo.github.io/an-zhuang-yuan-cheng-kai-fa-zhuo-mian-huan-jing.html" rel="alternate"></link><published>2020-08-26T16:01:00+08:00</published><updated>2020-08-26T16:01:00+08:00</updated><author><name>Recozo</name></author><id>tag:recozo.github.io,2020-08-26:/an-zhuang-yuan-cheng-kai-fa-zhuo-mian-huan-jing.html</id><summary type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;安装操作系统及辅助功能&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;正常安装debian（假定安装时指定的普通用户为 recozo），语言选择英文，时区美国东部时间……，安装软件时桌 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;安装操作系统及辅助功能&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;正常安装debian（假定安装时指定的普通用户为 recozo），语言选择英文，时区美国东部时间……，安装软件时桌面环境选择 XFCE，启用 SSH Server，选择 standard system utilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装完成后，默认使用普通用户登录，登录后打开一个终端窗口，切换为 root 用户，为普通用户启用 sudo 功能&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ su - root
# apt install sudo
# adduser recozo sudo
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装中文输入法（支持五笔与拼音），安装完后点击右上角的输入法图标进行输入法配置&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install fcitx-table-wubi
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;安装远程桌面（&lt;a class="reference external" href="https://forums.kali.org/showthread.php?46345-Enabling-Remote-Desktop-and-SSH-access-to-Kali"&gt;参考&lt;/a&gt;）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install xrdp
# systemctl start xrdp
# systemctl start xrdp-sesman
# systemctl enable xrdp
# systemctl enable xrdp-sesman
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启用远程声音（&lt;a class="reference external" href="https://github.com/neutrinolabs/pulseaudio-module-xrdp/wiki/README"&gt;参考&lt;/a&gt;）&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt install build-essential dpkg-dev libpulse-dev pulseaudio
# apt build-dep pulseaudio
# apt source pulseaudio
# cd pulseaudio-12.2/
# ./configure

# apt install git
# git clone https://github.com/neutrinolabs/pulseaudio-module-xrdp.git

# cd pulseaudio-module-xrdp
# ./bootstrap &amp;amp;&amp;amp; ./configure PULSE_DIR=/root/pulseaudio-12.2
# make
# make install
# ls $(pkg-config --variable=modlibexecdir libpulse)
# cd
# rm -r pulseaudio*
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;设置正确的时区&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# timedatectl set-timezone Asia/Shanghai
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;重新启动系统以确保新的桌面环境正常启动，可在其它电脑上进行远程登录并进行操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="debian"></category></entry></feed>